@model Project_Creation.DTO.ProductDto

@{
    ViewData["Title"] = "Create Product";
}

<div asp-validation-summary="ModelOnly" class="text-danger"></div>
<div class="container mt-4">
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h2>Add New Product</h2>
            <a class="btn btn-secondary" asp-action="Index" asp-controller="Supplier2">Add New Supplier</a>
        </div>
        <div class="card-body">
            <form asp-action="Create" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="ProductName" class="form-label">Product Name *</label>
                        <input asp-for="ProductName" class="form-control" id="productName" required/>
                        <span asp-validation-for="ProductName" class="text-danger"></span>
                    </div>

                    <!-- Supplier Dropdown -->
                    <div class="col-md-6 mb-3">
                        <label asp-for="SupplierId" class="form-label">Supplier (Optional)</label>
                        <select asp-for="SupplierId" class="form-select">
                            <option value="">-- Select Supplier --</option>
                            @if (Model.Suppliers != null)
                            {
                                foreach (var supplier in Model.Suppliers)
                                {
                                    <option value="@supplier.SupplierID">
                                        @supplier.SupplierName - @supplier.ContactPerson
                                    </option>
                                }
                            }
                        </select>
                        <span asp-validation-for="SupplierId" class="text-danger"></span>
                    </div>
                </div>

                <div class="row">
                    <!-- Custom Category Selection -->
                    <div class="col-md-6 mb-3">
                        <label class="control-label">Category *</label>
                        
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle w-100 text-start d-flex justify-content-between align-items-center" type="button" id="categoryDropdown">
                                <span id="selectedCategory">-- Select Category --</span>
                            </button>
                            <div class="dropdown-menu w-100 p-2" id="categoryList">
                                <!-- Add new category input -->
                                <div class="px-2 pb-2 d-flex">
                                    <input type="text" id="newCategoryInput" class="form-control" placeholder="Type to add new category">
                                    <button type="button" id="addCategoryBtn" class="btn btn-sm btn-primary ms-2">Add</button>
                                </div>
                                <div class="dropdown-divider"></div>
                                
                                <!-- Category options -->
                                @foreach (var category in Model.Category)
                                {
                                    <a class="dropdown-item d-flex justify-content-between align-items-center category-item" href="#" data-value="@category.CategoryName">
                                        <span>@category.CategoryName</span>
                                        <i class="fas fa-times text-danger delete-category" data-id="@category.Id"></i>
                                    </a>
                                }
                            </div>
                        </div>
                        
                        <!-- Hidden select for form submission -->
                        <select id="categorySelect" name="Category2" class="d-none">
                            <option value="">-- Select Category --</option>
                            @foreach (var category in Model.Category)
                            {
                                <option value="@category.CategoryName">@category.CategoryName</option>
                            }
                        </select>
                        
                        <input type="hidden" asp-for="NewCategoryName" id="newCategoryHiddenInput" />
                        <span asp-validation-for="Category2" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-3 d-flex flex-column flex-sm-row gap-2">
                        <div class="col-md-6">
                            <label asp-for="SKU" class="form-label">Stock Keeping Unit (SKU)</label>
                            <input asp-for="SKU" class="form-control" id="skuField" readonly />
                            <span asp-validation-for="SKU" class="text-danger"></span>
                        </div>
                        <!-- Change this in your form -->
                        <div class="col-md-6">
                            <label class="form-label">Barcode</label>
                            <div id="barcodeContainer">
                                @if (!string.IsNullOrEmpty(Model.Barcode))
                                {
                                    <img src="@Model.Barcode" alt="Product Barcode" style="max-height: 50px;" />
                                }
                            </div>
                            <input type="hidden" asp-for="Barcode" id="barcodeImageData" />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="PurchasePrice" class="form-label">Unit Price *</label>
                        <input asp-for="PurchasePrice" class="form-control" type="number" step="0.01" required />
                        <span asp-validation-for="PurchasePrice" class="text-danger"></span>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label asp-for="SellingPrice" class="form-label">Selling Price *</label>
                        <input asp-for="SellingPrice" class="form-control" type="number" step="0.01" required />
                        <span asp-validation-for="SellingPrice" class="text-danger"></span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="QuantityInStock" class="form-label">Initial Stock *</label>
                        <input asp-for="QuantityInStock" class="form-control" type="number" required />
                        <span asp-validation-for="QuantityInStock" class="text-danger"></span>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label asp-for="ReorderLevel" class="form-label">Reorder Level *</label>
                        <input asp-for="ReorderLevel" class="form-control" type="number" required />
                        <span asp-validation-for="ReorderLevel" class="text-danger"></span>
                    </div>
                </div>

                <div class="mb-3">
                    <label asp-for="Description" class="form-label">Description</label>
                    <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="d-flex justify-content-between">
                    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
                    <button type="submit" class="btn btn-primary">Create Product</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    
    <style>
        /* Custom dropdown styles */
        .dropdown {
            position: relative;
        }
        
        .dropdown-menu.show {
            display: block !important;
            opacity: 1 !important;
            visibility: visible !important;
            position: absolute;
            top: 100%;
            left: 0;
            z-index: 1000;
            width: 100%;
            background-color: white;
            border: 1px solid rgba(0,0,0,.15);
            border-radius: 0.25rem;
        }
        
        .dropdown-menu {
            max-height: 300px;
            overflow-y: auto;
        }
        
        .delete-category {
            cursor: pointer;
        }
        
        .delete-category:hover {
            color: #dc3545 !important;
        }
    </style>
    
    <script>
        $(document).ready(function () {
            // Make sure dropdown works properly
            $('#categoryDropdown').on('click', function(e) {
                e.preventDefault();
                $('#categoryList').toggleClass('show');
            });
            
            // Close dropdown when clicking outside
            $(document).on('click', function(e) {
                if (!$(e.target).closest('.dropdown').length) {
                    $('#categoryList').removeClass('show');
                }
            });
            
            // Handle category selection
            $(document).on('click', '.category-item', function(e) {
                // Ignore clicks on the delete button
                if ($(e.target).hasClass('delete-category') || $(e.target).closest('.delete-category').length) {
                    return;
                }
                
                var categoryName = $(this).data('value');
                selectCategory(categoryName);
            });
            
            // Handle new category input
            $('#newCategoryInput').on('keypress', function(e) {
                if (e.which === 13) { // Enter key
                    e.preventDefault();
                    e.stopPropagation();
                    
                    addNewCategory();
                }
            });
            
            // Add button for mobile users
            $('#addCategoryBtn').on('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                addNewCategory();
            });
            
            // Handle delete category
            $(document).on('click', '.delete-category', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                var id = $(this).data('id');
                var name = $(this).closest('.category-item').data('value');
                
                deleteCategory(id, name);
            });
            
            function addNewCategory() {
                var categoryName = $('#newCategoryInput').val().trim();
                
                if (!categoryName) return;
                
                // Check if category already exists
                var exists = false;
                $('#categorySelect option').each(function() {
                    if ($(this).val().toLowerCase() === categoryName.toLowerCase()) {
                        exists = true;
                        return false;
                    }
                });
                
                if (exists) {
                    alert('This category already exists!');
                    return;
                }
                
                // Add to hidden select
                $('#categorySelect').append(`<option value="${categoryName}">${categoryName}</option>`);
                
                // Add to dropdown list
                var newItem = `
                    <a class="dropdown-item d-flex justify-content-between align-items-center category-item" href="#" data-value="${categoryName}">
                        <span>${categoryName}</span>
                    </a>
                `;
                $(newItem).insertAfter('.dropdown-divider');
                
                // Select the new category
                selectCategory(categoryName, true);
                
                // Clear input
                $('#newCategoryInput').val('');
                
                // Keep dropdown open
                $('#categoryList').addClass('show');
            }
            
            function selectCategory(name, isNew = false) {
                // Update selected text
                $('#selectedCategory').text(name);
                
                // Update hidden select
                $('#categorySelect').val(name);
                
                // Update new category input if needed
                if (isNew) {
                    $('#newCategoryHiddenInput').val(name);
                } else {
                    $('#newCategoryHiddenInput').val('');
                }
                
                // Close dropdown
                $('#categoryList').removeClass('show');
                
                // Update SKU and barcode
                generateSKUAndBarcode();
            }
            
            function deleteCategory(id, name) {
                Swal.fire({
                    title: 'Delete Category?',
                    text: `Are you sure you want to delete "${name}"?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/Inventory1/DeleteCategory',
                            type: 'POST',
                            data: { id: parseInt(id) },
                            success: function(response) {
                                Swal.fire('Deleted!', 'Category has been deleted.', 'success').then(() => {
                                    // Remove from dropdown list
                                    $(`.category-item[data-value="${name}"]`).remove();
                                    
                                    // Remove from hidden select
                                    $(`#categorySelect option[value="${name}"]`).remove();
                                    
                                    // Reset selection if needed
                                    if ($('#selectedCategory').text() === name) {
                                        $('#selectedCategory').text('-- Select Category --');
                                        $('#categorySelect').val('');
                                    }
                                });
                            },
                            error: function() {
                                Swal.fire('Error', 'Failed to delete category.', 'error');
                            }
                        });
                    }
                });
            }

            // Generate SKU and barcode when product name changes
            $('#productName').on('input', function() {
                generateSKUAndBarcode();
            });
            
            // Validate form to ensure a category is selected
            $('form').on('submit', function(e) {
                var categoryValue = $('#categorySelect').val();
                if (!categoryValue) {
                    e.preventDefault();
                    alert('Please select or enter a category');
                    return false;
                }
                return true;
            });
        });

        // Replace dollar sign with P in price formatting
        function formatCurrency(amount) {
            return '₱' + parseFloat(amount).toFixed(2);
        }

        function generateSKUAndBarcode() {
            const name = $('#productName').val().trim();
            const category = $('#categorySelect').val();

            if (name && category) {
                // Generate SKU
                const namePart = name.substring(0, 3).toUpperCase();
                const categoryPart = category.substring(0, 3).toUpperCase();
                // Generate a random 4-5 digit number
                const randomNum = Math.floor(1000 + Math.random() * 90000).toString();
                const sku = `${namePart}-${categoryPart}-${randomNum}`;

                $('#skuField').val(sku);

                // Generate and store barcode
                generateBarcode(sku);
            }
        }

        function generateBarcode(sku) {
            $('#barcodeContainer').empty();
            const canvas = document.createElement("canvas");
            $('#barcodeContainer').append(canvas);

            JsBarcode(canvas, sku, {
                format: "CODE128",
                lineColor: "#000",
                width: 2,
                height: 50,
                displayValue: true
            });

            // Convert to data URL and update hidden field
            const dataUrl = canvas.toDataURL("image/png");
            $('#barcodeImageData').val(dataUrl);

            // Update display
            const img = new Image();
            img.src = dataUrl;
            img.alt = "Product Barcode";
            img.style.maxHeight = "50px";
            $('#barcodeContainer').empty().append(img);
        }
    </script>
}