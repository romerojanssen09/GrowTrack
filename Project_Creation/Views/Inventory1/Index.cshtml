@using Project_Creation.Models.Entities;
@using System.Security.Claims
@model IEnumerable<Project_Creation.Models.Entities.Product>

@{
    ViewData["Title"] = "Inventory1 Management";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center flex-sm-row flex-column gap-2 mb-4">
        <h1>Inventory Management</h1>
        <div class="nav-buttons ">
            <a asp-action="Create" class="btn btn-primary me-2">
                <i class="fas fa-plus-circle me-1"></i> Add New
            </a>
            <a asp-action="StockIn" class="btn btn-success me-2">
                <i class="fas fa-boxes me-1"></i> Restock
            </a>
            <a asp-action="QuickSale" class="btn btn-warning me-2">
                <i class="fas fa-cash-register me-1"></i> Quick Sale
            </a>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @{
        var canPublish = false;
        var isMarketplaceAuthorized = ViewBag.IsAllowedMarketplace ?? false;
        
        if (User.FindFirstValue(ClaimTypes.Role) == "BusinessOwner" && isMarketplaceAuthorized)
        {
            canPublish = true;
        }
        else
        {   
            var accessLevelClaim = User.FindFirstValue("AccessLevel");
            var staffAccessLevel = !string.IsNullOrEmpty(accessLevelClaim) &&
            Enum.TryParse<StaffAccessLevel>(accessLevelClaim, out var level) ? level : StaffAccessLevel.None;
            canPublish = staffAccessLevel.HasFlag(StaffAccessLevel.PublishedProducts) && isMarketplaceAuthorized;
        }
    }

    <!-- Search and Filter Section -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text bg-light">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" id="searchInput" class="form-control" placeholder="Search products by name, SKU, or category...">
                    </div>
                </div>
                <div class="col-md-3">
                    <select id="categoryFilter" class="form-select">
                        <option value="">All Categories</option>
                        @{
                            var categories = Model.Select(p => p.Category).Distinct().OrderBy(c => c);
                            foreach (var category in categories)
                            {
                                <option value="@category">@category</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="stockFilter" class="form-select">
                        <option value="">All Stock Levels</option>
                        <option value="low">Low Stock</option>
                        <option value="out">Out of Stock</option>
                        <option value="in">In Stock</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    @if (!isMarketplaceAuthorized && User.FindFirstValue(ClaimTypes.Role) == "BusinessOwner")
    {
        <div class="alert alert-info mb-4">
            <i class="fas fa-info-circle me-2"></i>
            <strong>Marketplace Access Required:</strong> To publish products to the marketplace, you need marketplace approval. 
            <a href="/Profile/Index" class="alert-link">Request access</a> from your profile settings.
        </div>
    }

    <div class="card mb-4">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="inventoryTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Category</th>
                            <th>Supplier</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>SKU | Barcode</th>
                            @if (canPublish)
                            {
                                <th>Marketplace</th>
                            }
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr data-category="@item.Category" data-stock="@item.QuantityInStock" data-reorder="@item.ReorderLevel">
                                <td>@item.ProductName</td>
                                <td>@item.Category</td>
                                <td>
                                    @{
                                        var supplier = ViewBag.Suppliers as List<Supplier>;
                                        var currentSupplier = supplier?.FirstOrDefault(s => s.SupplierID.ToString() == item.SupplierId);
                                    }
                                    @if (currentSupplier != null)
                                    {
                                        @currentSupplier.SupplierName
                                    }
                                    else
                                    {
                                        <span class="text-muted">No supplier</span>
                                    }
                                </td>
                                <td>@item.PurchasePrice.ToString("C")</td>
                                <td class="@(item.ReorderLevel.HasValue && item.QuantityInStock <= item.ReorderLevel.Value ? "text-danger fw-bold" : "")">
                                    @item.QuantityInStock
                                </td>
                                <td>
                                    <div class="d-flex flex-column">
                                        <p>@item.SKU</p>
                                        <img src="@item.Barcode" alt="@item.Barcode" style="width:120px;"/>
                                    </div>
                                </td>
                                @if (canPublish)
                                {
                                    <td>
                                        @if (item.IsPublished)
                                        {
                                            <span class="badge bg-success">Published</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Not Published</span>
                                        }
                                    </td>
                                }
                                <td>
                                    <div class="btn-group d-flex align-items-center">
                                        <button data-id="@item.Id" class="btn btn-sm btn-info details-btn">
                                            <i class="fas fa-info-circle"></i>
                                        </button>
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-primary">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button data-id="@item.Id" class="btn btn-sm btn-danger delete-btn">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                        @if (canPublish)
                                        {
                                            @if (item.IsPublished)
                                            {
                                                <a asp-action="PublishToMarketplace" asp-route-id="@item.Id" class="btn btn-sm btn-success">
                                                    <i class="fas fa-edit"></i> Edit Published
                                                </a>
                                                <a asp-action="UnPublishToMarketplace" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">
                                                    <i class="bi bi-arrow-bar-down"></i> Unpublish
                                                </a>
                                            }
                                            else if (item.IsAlreadyPublished && !item.IsPublished)
                                            {
                                                <a asp-action="PublishToMarketplaceAgain" asp-route-id="@item.Id" class="btn btn-sm btn-primary">
                                                    <i class="bi bi-upload"></i> Publish
                                                </a>
                                            }
                                            else
                                            {
                                                <a asp-action="PublishToMarketplace" asp-route-id="@item.Id" class="btn btn-sm btn-primary">
                                                    <i class="bi bi-upload"></i> Publish
                                                </a>
                                            }
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">Are you sure?</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                This action will permanently delete the product. Do you want to continue?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDeleteBtn" class="btn btn-danger">Yes, Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Product Details Modal -->
<div class="modal fade" id="productDetailsModal" tabindex="-1" aria-labelledby="productDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="productDetailsModalLabel">Product Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="productDetailsModalBody">
                <!-- Content will be loaded via AJAX -->
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<style>
    .table th {
        background-color: #f8f9fa;
        font-weight: 600;
    }

    .btn-group .btn {
        margin-right: 5px;
    }

    .btn-group .btn:last-child {
        margin-right: 0;
    }

    /* Add smooth transition for modal opening */
    .modal.fade .modal-dialog {
        transition: transform 0.3s ease-out;
    }
    
    /* Hide rows that don't match filter */
    tr.d-none {
        display: none !important;
    }
    
    .nav-buttons .btn {
        display: inline-flex;
        align-items: center;
    }

    @@media (max-width: 767.98px) {
        .nav-buttons {
            display: flex;
            flex-direction: column;
            width: 50%;
            gap: 6px;
        }
    }

    /* Improved button group styling */
    .btn-group {
        flex-wrap: wrap;
        gap: 4px;
        justify-content: flex-start;
    }

    .btn-group .btn {
        margin-right: 0 !important;
        margin-bottom: 4px;
        white-space: nowrap;
        font-size: 0.75rem;
    }
</style> 

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(document).ready(function() {
            // Handle Details button click
            $(document).on('click', '.details-btn', function(e) {
                e.preventDefault();
                var productId = $(this).data('id');
                var url = '@Url.Action("Details", "Inventory1")' + '/' + productId;

                // Show loading spinner
                $('#productDetailsModalBody').html(`
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                `);

                // Show modal
                var detailsModal = new bootstrap.Modal(document.getElementById('productDetailsModal'));
                detailsModal.show();

                // Load content via AJAX
                $.get(url, function(data) {
                    $('#productDetailsModalBody').html(data);
                }).fail(function() {
                    $('#productDetailsModalBody').html(`
                        <div class="alert alert-danger">
                            Failed to load product details. Please try again.
                        </div>
                    `);
                });
            });

            // Handle Delete button click
            $(document).on('click', '.delete-btn', function() {
                const productId = $(this).data('id');

                Swal.fire({
                    title: 'Are you sure?',
                    text: "This action will permanently delete the product.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'Cancel'
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        try {
                            const response = await $.ajax({
                                url: '@Url.Action("Delete", "Inventory1")',
                                type: 'POST',
                                data: { productId: productId }
                            });

                            if (response.success) {
                                Swal.fire('Deleted!', 'Product has been deleted.', 'success').then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire('Error', 'Product could not be deleted.', 'error');
                            }
                        } catch (err) {
                            console.error(err);
                            Swal.fire('Error', 'An unexpected error occurred.', 'error');
                        }
                    }
                });
            });
            
            // Search functionality
            $("#searchInput").on("keyup", function() {
                var value = $(this).val().toLowerCase();
                filterTable();
            });
            
            // Category filter
            $("#categoryFilter").on("change", function() {
                filterTable();
            });
            
            // Stock filter
            $("#stockFilter").on("change", function() {
                filterTable();
            });
            
            // Combined filter function
            function filterTable() {
                var searchValue = $("#searchInput").val().toLowerCase();
                var categoryValue = $("#categoryFilter").val();
                var stockValue = $("#stockFilter").val();
                
                $("#inventoryTable tbody tr").each(function() {
                    var row = $(this);
                    var name = row.find("td:first").text().toLowerCase();
                    var category = row.data("category");
                    var sku = row.find("td:nth-child(6) p").text().toLowerCase();
                    var stock = parseInt(row.data("stock"));
                    var reorderLevel = parseInt(row.data("reorder") || 0);
                    
                    // Search text filter
                    var matchesSearch = name.includes(searchValue) || 
                                       category.toLowerCase().includes(searchValue) || 
                                       sku.includes(searchValue);
                    
                    // Category filter
                    var matchesCategory = categoryValue === "" || category === categoryValue;
                    
                    // Stock filter
                    var matchesStock = true;
                    if (stockValue === "low") {
                        matchesStock = stock <= reorderLevel && stock > 0;
                    } else if (stockValue === "out") {
                        matchesStock = stock === 0;
                    } else if (stockValue === "in") {
                        matchesStock = stock > reorderLevel;
                    }
                    
                    // Combined filter
                    if (matchesSearch && matchesCategory && matchesStock) {
                        row.removeClass("d-none");
                    } else {
                        row.addClass("d-none");
                    }
                });
                
                // Show message if no results
                if ($("#inventoryTable tbody tr:visible").length === 0) {
                    if ($("#no-results-row").length === 0) {
                        $("#inventoryTable tbody").append(
                            '<tr id="no-results-row"><td colspan="' + 
                            ($("#inventoryTable thead th").length) + 
                            '" class="text-center">No matching products found</td></tr>'
                        );
                    }
                } else {
                    $("#no-results-row").remove();
                }
            }
        });
    </script>
}