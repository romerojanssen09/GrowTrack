@using Microsoft.AspNetCore.Html
@using System.Security.Claims
@model List<Project_Creation.Models.Entities.InventoryLog>
@{
    ViewData["Title"] = "Inventory Movements";
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
    var userRole = User.FindFirstValue(ClaimTypes.Role);
    var businessId = userRole == "Staff" ? User.FindFirstValue("BOId") : userId;
}

<div class="movements-container">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h2 class="text-accent">Inventory Movements Report</h2>
        <a href="@Url.Action("Index", "Reports")" class="btn btn-outline-primary">
            <i class="fas fa-arrow-left me-1"></i> Back to reports
        </a>
    </div>
    <!-- Real-time status indicator -->
    <div class="alert alert-info alert-dismissible fade show d-flex align-items-center" role="alert" id="realtime-status">
        <div class="spinner-border spinner-border-sm me-2" role="status" id="realtime-spinner">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div>
            <strong>Real-time updates active.</strong> 
            <span id="connection-status">Connecting...</span>
        </div>
        <div class="ms-auto">
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
    
    <!-- Real-time notifications area -->
    <div id="movement-notifications" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1050;">
        <!-- Toasts will be added here dynamically -->
    </div>

    <!-- Filter Form -->
    <div class="card mb-4">
        <div class="card-body">
            <form method="get" asp-action="Movements" asp-controller="Reports" class="row g-3">
                <!-- Hidden field for real-time additions count -->
                <input type="hidden" name="realTimeAdditions" id="realTimeAdditionsField" value="@ViewBag.RealTimeAdditions">
                <!-- Date Range -->
                <div class="col-md-3">
                    <label for="startDate" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="startDate" name="startDate" 
                           value="@ViewBag.StartDate">
                </div>
                <div class="col-md-3">
                    <label for="endDate" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="endDate" name="endDate" 
                           value="@ViewBag.EndDate">
                </div>
                
                <!-- Product Filter -->
                <div class="col-md-3">
                    <label for="productName" class="form-label">Product</label>
                    <select class="form-select" id="productName" name="productName">
                        <option value="">All Products</option>
                        @foreach (var product in ViewBag.Products)
                        {
                            var isSelected = ViewBag.ProductName == product;
                            <option value="@product" selected="@isSelected">@product</option>
                        }
                    </select>
                </div>
                
                <!-- Movement Type Filter -->
                <div class="col-md-3">
                    <label for="movementType" class="form-label">Movement Type</label>
                    <select class="form-select" id="movementType" name="movementType">
                        <option value="">All Types</option>
                        @foreach (var type in ViewBag.MovementTypes)
                        {
                            var isSelected = ViewBag.MovementType == type;
                            <option value="@type" selected="@isSelected">@type</option>
                        }
                    </select>
                </div>
                
                <!-- Action Buttons -->
                <div class="col-md-3 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-filter me-1"></i> Apply Filters
                    </button>
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <a href="@Url.Action("Movements")" class="btn btn-outline-secondary w-100">
                        <i class="fas fa-times me-1"></i> Clear
                    </a>
                </div>
            </form>
            
            <!-- Export Options -->
            <div class="d-flex justify-content-end gap-2 mt-3">
                <a href="@Url.Action("ExportMovements", new { 
                    format = "csv", 
                    startDate = ViewBag.StartDate, 
                    endDate = ViewBag.EndDate, 
                    productName = ViewBag.ProductName, 
                    movementType = ViewBag.MovementType
                })" class="btn btn-outline-success">
                    <i class="fas fa-file-csv me-1"></i> Export CSV
                </a>
                <a href="@Url.Action("ExportMovements", new { 
                    format = "excel", 
                    startDate = ViewBag.StartDate, 
                    endDate = ViewBag.EndDate, 
                    productName = ViewBag.ProductName, 
                    movementType = ViewBag.MovementType
                })" class="btn btn-outline-success">
                    <i class="fas fa-file-excel me-1"></i> Export Excel
                </a>
            </div>
        </div>
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info mt-4">
            No inventory movements found for the selected criteria.
        </div>
    }
    else
    {
        <!-- Summary Section -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="row sales-summary">
                    <div class="col-md-3 col-6 text-center mb-3 mb-md-0">
                        <h5>Total Movements</h5>
                        <h3 id="movementCount">@Model.Count</h3>
                    </div>
                    <div class="col-md-3 col-6 text-center mb-3 mb-md-0r">
                        <h5>Total In</h5>
                        <h3 class="text-success" id="totalIn">@Model.Where(m => (m.QuantityAfter - m.QuantityBefore) > 0).Sum(m => m.QuantityAfter - m.QuantityBefore)</h3>
                    </div>
                    <div class="col-md-3 col-6 text-center mb-3 mb-md-0">
                        <h5>Total Out</h5>
                        <h3 class="text-danger" id="totalOut">@Math.Abs(Model.Where(m => (m.QuantityAfter - m.QuantityBefore) < 0).Sum(m => m.QuantityAfter - m.QuantityBefore))</h3>
                    </div>
                    <div class="col-md-3 col-6 text-center mb-3 mb-md-0">
                        <h5>Net Change</h5>
                        <h3 class="@(Model.Sum(m => m.QuantityAfter - m.QuantityBefore) >= 0 ? "text-success" : "text-danger")"
                            id="netChange">
                            @Model.Sum(m => m.QuantityAfter - m.QuantityBefore)
                        </h3>
                    </div>
                </div>
            </div>
        </div>

        <!-- Movements Table -->
        <div class="card">
            <div class="card-body">
                <!-- Table Search Box -->
                <div class="mb-3">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" id="tableSearch" class="form-control" placeholder="Search across all columns...">
                        <button id="clearSearch" class="btn btn-outline-secondary" type="button">Clear</button>
                    </div>
                </div>

                <div class="table-responsive">
                    <table id="movementsTable" class="table table-hover shadow-sm">
                        <thead class="table-dark">
                            <tr>
                                <th>Date & Time</th>
                                <th>Product</th>
                                <th>Type</th>
                                <th class="text-end">Before</th>
                                <th class="text-end">Change</th>
                                <th class="text-end">After</th>
                                <th>Reference</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white" id="movements-tbody">
                            @foreach (var movement in Model)
                            {
                                var change = movement.QuantityAfter - movement.QuantityBefore;
                                <tr class="movement-row" data-id="@movement.Id">
                                    <td>@movement.Timestamp.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>@movement.ProductName</td>
                                    <td>@GetMovementTypeBadge(movement.MovementType)</td>
                                    <td class="text-end">@movement.QuantityBefore.ToString("N0")</td>
                                    <td class="text-end @(change >= 0 ? "text-success" : "text-danger") change-value">
                                        @(change >= 0 ? "+" : "")@change.ToString("N0")
                                    </td>
                                    <td class="text-end">@movement.QuantityAfter.ToString("N0")</td>
                                    <td>
                                        <span class="badge bg-light text-dark">@movement.ReferenceId</span>
                                    </td>
                                    <td>
                                        <small class="text-muted">@movement.Notes</small>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination Controls -->
                @if (ViewBag.TotalPages > 1)
                {
                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <div>
                            <span class="text-muted">Showing @((ViewBag.CurrentPage - 1) * ViewBag.PageSize + 1) to @(Math.Min(ViewBag.CurrentPage * ViewBag.PageSize, ViewBag.TotalItems)) of @ViewBag.TotalItems entries</span>
                        </div>
                        <nav aria-label="Inventory movements pagination">
                            <ul class="pagination">
                                <!-- Previous Page -->
                                <li class="page-item @(ViewBag.CurrentPage == 1 ? "disabled" : "")">
                                    <a class="page-link" href="@Url.Action("Movements", new { 
                                        startDate = ViewBag.StartDate, 
                                        endDate = ViewBag.EndDate, 
                                        productName = ViewBag.ProductName, 
                                        movementType = ViewBag.MovementType, 
                                        page = ViewBag.CurrentPage - 1,
                                        realTimeAdditions = ViewBag.RealTimeAdditions
                                    })" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                                
                                <!-- Page Numbers -->
                                @{
                                    int startPage = Math.Max(1, ViewBag.CurrentPage - 2);
                                    int endPage = Math.Min(ViewBag.TotalPages, startPage + 4);
                                    
                                    if (endPage - startPage < 4 && startPage > 1)
                                    {
                                        startPage = Math.Max(1, endPage - 4);
                                    }
                                }
                                
                                @for (int i = startPage; i <= endPage; i++)
                                {
                                    <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="@Url.Action("Movements", new { 
                                            startDate = ViewBag.StartDate, 
                                            endDate = ViewBag.EndDate, 
                                            productName = ViewBag.ProductName, 
                                            movementType = ViewBag.MovementType, 
                                            page = i,
                                            realTimeAdditions = ViewBag.RealTimeAdditions
                                        })">@i</a>
                                    </li>
                                }
                                
                                <!-- Next Page -->
                                <li class="page-item @(ViewBag.CurrentPage == ViewBag.TotalPages ? "disabled" : "")">
                                    <a class="page-link" href="@Url.Action("Movements", new { 
                                        startDate = ViewBag.StartDate, 
                                        endDate = ViewBag.EndDate, 
                                        productName = ViewBag.ProductName, 
                                        movementType = ViewBag.MovementType, 
                                        page = ViewBag.CurrentPage + 1,
                                        realTimeAdditions = ViewBag.RealTimeAdditions
                                    })" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                }
            </div>
        </div>
    }
</div>

@functions {
    public IHtmlContent GetMovementTypeBadge(string movementType)
    {
        var badgeClass = movementType switch
        {
            "Purchase" => "bg-primary",
            "Sale" => "bg-danger",
            "Stock In" => "bg-success",
            "Adjustment" => "bg-warning text-dark",
            "New Product" => "bg-info",
            "Edit Product" => "bg-secondary",
            "Delete Product" => "bg-dark",
            _ => "bg-secondary"
        };

        return new HtmlString($"<span class='badge {badgeClass}'>{movementType}</span>");
    }
}

@section Scripts {
    <!-- SignalR client script -->
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    
    <!-- Reference to the inventory movements JavaScript file -->
    <script src="~/js/inventory-movements.js"></script>
    
    <script>
        // Add data attributes to the body element for the JavaScript to use
        document.body.setAttribute('data-user-id', '@userId');
        document.body.setAttribute('data-business-id', '@businessId');
        document.body.setAttribute('data-current-page', '@(ViewBag.CurrentPage ?? 1)');
        document.body.setAttribute('data-page-size', '@(ViewBag.PageSize ?? 50)');
        document.body.setAttribute('data-total-items', '@(ViewBag.TotalItems ?? 0)');
        document.body.setAttribute('data-total-pages', '@(ViewBag.TotalPages ?? 1)');
    </script>
}

    <style>
        @@keyframes highlight {
            0% { background-color: rgba(0, 123, 255, 0.3); }
            100% { background-color: transparent; }
        }

        /* Sales summary styles */
        .sales-summary {
            display: flex;
            flex-wrap: wrap;
            margin: 0 -10px;
        }
        
        .sales-summary > div {
            padding: 10px;
        }
        
        .sales-summary h5 {
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .sales-summary h3 {
            margin-bottom: 0;
            font-weight: 600;
        }
        
        .movement-row.highlight {
            animation: highlight 2s ease-in-out;
        }
        
        #realtime-status {
            transition: all 0.3s ease-in-out;
        }
        
        .animate__animated {
            animation-duration: 0.75s;
        }
        
        @@keyframes fadeInDown {
            from {
                opacity: 0;
                transform: translate3d(0, -20px, 0);
            }
            to {
                opacity: 1;
                transform: translate3d(0, 0, 0);
            }
        }

        .movements-container{
            padding: 0 20px 0 20px !important;
        }

        @@media (max-width: 767.98px) {
            .movements-container{
                padding: 0 10px 0 10px !important;
            }

            /* Improve spacing on mobile */
            .sales-summary {
                margin: 0 -5px;
            }
            
            .sales-summary > div {
                padding: 5px;
            }
            
            .sales-summary h5 {
                margin-bottom: 4px;
            }
        }
        
        .animate__fadeInDown {
            animation-name: fadeInDown;
        }
        
        .transaction-group {
            border-left: 4px solid #0d6efd;
        }
        
        .transaction-indicator {
            display: inline-block;
            margin-left: 8px;
        }
    </style>