@model Project_Creation.Models.ViewModels.SettingsViewModel
@using System.Security.Claims
@{
	ViewData["Title"] = "Account Settings";
	Layout = "_Layout";
}

<div class="bg-light py-4">
	<div class="container">
		<div class="row justify-content-center">
			<div class="col-lg-8">
				<!-- Profile Header Card -->
				<div class="card mb-4 overflow-hidden shadow-sm border-0">
					<div class="bg-primary bg-gradient text-white p-5 text-center position-relative">
						<div class="position-absolute top-0 end-0 p-3">
							<span class="badge bg-secondary rounded-pill px-3 py-2 fs-6">
								<i class="fas fa-star me-1"></i> Free Account
							</span>
						</div>
						<img src="https://ui-avatars.com/api/?name=@Model.Fullname&background=fff&color=6366f1&rounded=true&size=256"
						alt="User Avatar" class="rounded-circle border border-4 border-white shadow-lg mb-3" style="width: 120px; height: 120px; object-fit: cover;">
						<h2 class="fw-bold mb-1">Welcome Back!</h2>
						<p class="mb-3 fs-5 opacity-90">@Model.Email</p>
					</div>
					@if(User.IsInRole("Admin")){
					<div class="card-body bg-white p-0">
						<div class="row g-0 text-center">
							<div class="col-4 border-end p-3">
								<h4 class="fw-bold mb-0">12</h4>
								<small class="text-muted">Months Active</small>
							</div>
							<div class="col-4 border-end p-3">
								<h4 class="fw-bold mb-0">24</h4>
								<small class="text-muted">Transactions</small>
							</div>
							<div class="col-4 p-3">
								<h4 class="fw-bold mb-0">100%</h4>
								<small class="text-muted">Profile Complete</small>
							</div>
						</div>
					</div>
					}
				</div>

				<!-- Account Settings Card -->
				<div class="card mb-4 shadow-sm border-0 rounded-3">
					<div class="card-header bg-white d-flex align-items-center py-3 border-0">
						<div class="bg-primary bg-opacity-10 text-primary rounded-circle p-2 me-3">
							<i class="fas fa-user-cog"></i>
						</div>
						<span class="fs-5 fw-semibold">Account Information</span>
					</div>
					<div class="card-body">
						<!-- Alert Messages -->
						@if (TempData["SuccessMessage"] != null)
						{
							<div class="alert alert-success alert-dismissible fade show d-flex align-items-center" role="alert">
								<i class="fas fa-check-circle me-2"></i>
								<div>@TempData["SuccessMessage"]</div>
								<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
							</div>
						}

						@if (TempData["ErrorMessage"] != null)
						{
							<div class="alert alert-danger alert-dismissible fade show d-flex align-items-center" role="alert">
								<i class="fas fa-exclamation-circle me-2"></i>
								<div>@TempData["ErrorMessage"]</div>
								<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
							</div>
						}

						@if (TempData["WarningMessage"] != null)
						{
							<div class="alert alert-warning alert-dismissible fade show d-flex align-items-center" role="alert">
								<i class="fas fa-exclamation-triangle me-2"></i>
								<div>@TempData["WarningMessage"]</div>
								<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
							</div>
						}

						<!-- Email Field -->
						<div class="mb-4">
							<label asp-for="Email" class="form-label fw-semibold">Email Address</label>
							<div class="input-group">
								<span class="input-group-text bg-light"><i class="fas fa-envelope"></i></span>
								<input asp-for="Email" class="form-control" readonly>
							</div>
							<small class="text-muted">Your email address is used for account identification and cannot be changed.</small>
						</div>

						<!-- Divider -->
						<div class="d-flex align-items-center my-4 text-muted">
							<hr class="flex-grow-1">
							<div class="bg-primary bg-opacity-10 text-primary rounded-circle p-2 mx-3">
								<i class="fas fa-key"></i>
							</div>
							<span class="fw-semibold">Password Settings</span>
							<hr class="flex-grow-1">
						</div>

						<!-- Change Password Form -->
						<form id="settingsForm" method="post" asp-action="ChangePassword" asp-controller="Profile">
							@Html.AntiForgeryToken()
							<div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

							<div class="mb-3">
								<label for="CurrentPassword" class="form-label fw-semibold">Current Password</label>
								<div class="input-group">
									<input type="password" id="CurrentPassword" name="CurrentPassword" class="form-control" required>
									<button class="btn btn-outline-secondary toggle-password" type="button">
										<i class="fas fa-eye"></i>
									</button>
								</div>
							</div>

							<div class="mb-3">
								<label for="NewPassword" class="form-label fw-semibold">New Password</label>
								<div class="input-group mb-2">
									<input type="password" id="NewPassword" name="NewPassword" class="form-control" required minlength="8">
									<button class="btn btn-outline-secondary toggle-password" type="button">
										<i class="fas fa-eye"></i>
									</button>
								</div>
								<div class="bg-light rounded" style="height: 4px;">
									<div class="bg-danger rounded" id="passwordStrengthBar" style="height: 100%; width: 0%; transition: width 0.3s ease;"></div>
								</div>
								<small class="text-muted">Password must be at least 8 characters long and contain a mix of letters, numbers, and symbols.</small>
							</div>

							<div class="mb-4">
								<label for="ConfirmPassword" class="form-label fw-semibold">Confirm New Password</label>
								<div class="input-group">
									<input type="password" id="ConfirmPassword" name="ConfirmPassword" class="form-control" required>
									<button class="btn btn-outline-secondary toggle-password" type="button">
										<i class="fas fa-eye"></i>
									</button>
								</div>
							</div>

							<!-- Security Settings -->
							<div class="mb-4">
								<h5 class="border-bottom pb-2">Security Settings</h5>
								
								<!-- Two-Factor Authentication -->
								<div class="form-check form-switch mb-3">
									<input class="form-check-input" type="checkbox" id="twoFactorToggle" 
										   @(Model.TwoFactorEnabled ? "checked" : "")>
									<label class="form-check-label" for="twoFactorToggle">
										Two-Factor Authentication
									</label>
									<small class="form-text text-muted d-block">
										Add an extra layer of security to your account
									</small>
								</div>

								<!-- Email Notifications -->
								<div class="form-check form-switch mb-3">
									<input class="form-check-input" type="checkbox" id="emailNotificationsToggle"
										   @(Model.AllowEmailNotifications ? "checked" : "")>
									<label class="form-check-label" for="emailNotificationsToggle">
										Email Notifications
									</label>
									<small class="form-text text-muted d-block">
										Receive email notifications for important updates
									</small>
								</div>

								<!-- Login Alerts -->
								<div class="form-check form-switch mb-3">
									<input class="form-check-input" type="checkbox" id="loginAlertsToggle"
										   @(Model.AllowLoginAlerts ? "checked" : "")>
									<label class="form-check-label" for="loginAlertsToggle">
										Login Alerts
									</label>
									<small class="form-text text-muted d-block">
										Get notified when your account is accessed from a new device
									</small>
								</div>
							</div>

							<div class="d-grid">
								<button type="submit" class="btn btn-primary">
									<i class="fas fa-save me-2"></i>Save Changes
								</button>
							</div>
						</form>
					</div>
				</div>

				@if (User.FindFirstValue(ClaimTypes.Role) != "Staff")
				{
					<!-- Danger Zone Card -->
					<div class="card mb-4 border-0 shadow-sm rounded-3">
						<!-- Delete Account Section -->
						<div class="card border-danger border-1 shadow-sm mb-3">
							<div class="card-body">
								<h5 class="card-title text-danger">Delete Your Account</h5>
								<p class="card-text text-muted">This action cannot be undone. Once you delete your account, all of your data will be permanently removed from our system.</p>

								<button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteAccountModal">
									<i class="fas fa-exclamation-triangle me-2"></i>Delete Account
								</button>
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	</div>
</div>


<!-- Delete Account Modal -->
<div class="modal fade" id="deleteAccountModal" tabindex="-1" aria-labelledby="deleteAccountModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content border-0 shadow">
			<div class="modal-header bg-danger text-white">
				<h5 class="modal-title" id="deleteAccountModalLabel">
					<i class="fas fa-exclamation-triangle me-2"></i>Delete Account Confirmation
				</h5>
				<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body p-4">
				<div class="text-center mb-4">
					<div class="bg-danger bg-opacity-10 text-danger rounded-circle p-3 d-inline-block mb-3">
						<i class="fas fa-trash-alt fa-2x"></i>
					</div>
					<h4 class="fw-bold">Are you absolutely sure?</h4>
				</div>
				
				<div class="alert alert-warning">
					<i class="fas fa-exclamation-circle me-2"></i>
					This action <strong>cannot be undone</strong>. This will permanently delete your account and remove all your data from our servers.
				</div>
				
				<p>Please read the following consequences carefully:</p>
				<ul class="text-muted">
					<li>All your personal information will be deleted</li>
					<li>All your uploaded files will be removed</li>
					<li>You will lose access to all your data</li>
					<li>You will need to create a new account if you wish to return</li>
				</ul>
			</div>
			<div class="modal-footer bg-light">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
					<i class="fas fa-times me-2"></i>Cancel
				</button>
				<form asp-action="DeleteAccount" method="post" class="d-inline">
					@Html.AntiForgeryToken()
					<button type="submit" class="btn btn-danger" id="confirmDeleteAccount">
						<i class="fas fa-trash-alt me-2"></i>Yes, Delete My Account
					</button>
				</form>
			</div>
		</div>
	</div>
</div>

@section Scripts{

	<script>
		$(document).ready(function() {
			// Password visibility toggle
			$('.toggle-password').click(function() {
				const input = $(this).siblings('input');
				const icon = $(this).find('i');

				if (input.attr('type') === 'password') {
					input.attr('type', 'text');
					icon.removeClass('fa-eye').addClass('fa-eye-slash');
				} else {
					input.attr('type', 'password');
					icon.removeClass('fa-eye-slash').addClass('fa-eye');
				}
			});

			// Password strength indicator
			$('#NewPassword').on('input', function() {
				const password = $(this).val();
				const strengthBar = $('#passwordStrengthBar');
				let strength = 0;

				if (password.length > 7) strength += 1;
				if (password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)) strength += 1;
				if (password.match(/([0-9])/)) strength += 1;
				if (password.match(/([!,%,&,@@,#,$,^,*,?,_,~])/)) strength += 1;

				// Update strength bar
				strengthBar.removeClass('bg-danger bg-warning bg-success');

				if (password.length === 0) {
					strengthBar.css('width', '0');
				} else if (strength <= 2) {
					strengthBar.css('width', '33%').addClass('bg-danger');
				} else if (strength === 3) {
					strengthBar.css('width', '66%').addClass('bg-warning');
				} else {
					strengthBar.css('width', '100%').addClass('bg-success');
				}
			});

			// Two-Factor Authentication Toggle
			$('#twoFactorToggle').change(function() {
				var isEnabled = $(this).prop('checked');
				Swal.fire({
					title: isEnabled ? 'Enable Two-Factor Authentication?' : 'Disable Two-Factor Authentication?',
					text: isEnabled ? 
						'This will add an extra layer of security to your account.' : 
						'This will remove the extra security layer from your account.',
					icon: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					confirmButtonText: 'Yes, ' + (isEnabled ? 'enable' : 'disable') + ' it!'
				}).then((result) => {
					if (result.isConfirmed) {
						$.ajax({
							url: '@Url.Action("ToggleTwoFactor", "Profile")',
							type: 'POST',
							data: { enabled: isEnabled },
							headers: {
								'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
							},
							success: function(response) {
								if (response.success) {
									Swal.fire({
										icon: 'success',
										title: 'Success!',
										text: 'Two-factor authentication has been ' + (isEnabled ? 'enabled' : 'disabled'),
										timer: 1500,
										showConfirmButton: false
									});
								} else {
									$(this).prop('checked', !isEnabled);
									Swal.fire({
										icon: 'error',
										title: 'Error!',
										text: response.message || 'Failed to update two-factor authentication'
									});
								}
							},
							error: function() {
								$(this).prop('checked', !isEnabled);
								Swal.fire({
									icon: 'error',
									title: 'Error!',
									text: 'An error occurred while updating two-factor authentication'
								});
							}
						});
					} else {
						$(this).prop('checked', !isEnabled);
					}
				});
			});

			// Email Notifications Toggle
			$('#emailNotificationsToggle').change(function() {
				var isEnabled = $(this).prop('checked');
				$.ajax({
					url: '@Url.Action("ToggleEmailNotifications", "Profile")',
					type: 'POST',
					data: { enabled: isEnabled },
					headers: {
						'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
					},
					success: function(response) {
						if (response.success) {
							Swal.fire({
								icon: 'success',
								title: 'Success!',
								text: 'Email notifications have been ' + (isEnabled ? 'enabled' : 'disabled'),
								timer: 1500,
								showConfirmButton: false
							});
						} else {
							$(this).prop('checked', !isEnabled);
							Swal.fire({
								icon: 'error',
								title: 'Error!',
								text: response.message || 'Failed to update email notifications'
							});
						}
					},
					error: function() {
						$(this).prop('checked', !isEnabled);
						Swal.fire({
							icon: 'error',
							title: 'Error!',
							text: 'An error occurred while updating email notifications'
						});
					}
				});
			});

			// Login Alerts Toggle
			$('#loginAlertsToggle').change(function() {
				var isEnabled = $(this).prop('checked');
				$.ajax({
					url: '@Url.Action("ToggleLoginAlerts", "Profile")',
					type: 'POST',
					data: { enabled: isEnabled },
					headers: {
						'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
					},
					success: function(response) {
						if (response.success) {
							Swal.fire({
								icon: 'success',
								title: 'Success!',
								text: 'Login alerts have been ' + (isEnabled ? 'enabled' : 'disabled'),
								timer: 1500,
								showConfirmButton: false
							});
						} else {
							$(this).prop('checked', !isEnabled);
							Swal.fire({
								icon: 'error',
								title: 'Error!',
								text: response.message || 'Failed to update login alerts'
							});
						}
					},
					error: function() {
						$(this).prop('checked', !isEnabled);
						Swal.fire({
							icon: 'error',
							title: 'Error!',
							text: 'An error occurred while updating login alerts'
						});
					}
				});
			});

			// Password Change Form Submission
			$('#settingsForm').submit(function(e) {
				e.preventDefault();
			
				var formData = {
					CurrentPassword: $('#CurrentPassword').val(),
					NewPassword: $('#NewPassword').val(),
					ConfirmPassword: $('#ConfirmPassword').val()
				};

				$.ajax({
					url: '@Url.Action("ChangePassword", "Profile")',
					type: 'POST',
					data: formData,
					headers: {
						'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
					},
					success: function(response) {
						if (response.success) {
							Swal.fire({
								icon: 'success',
								title: 'Success!',
								text: 'Password has been changed successfully',
								timer: 1500,
								showConfirmButton: false
							}).then(() => {
								$('#CurrentPassword').val('');
								$('#NewPassword').val('');
								$('#ConfirmPassword').val('');
							});
						} else {
							Swal.fire({
								icon: 'error',
								title: 'Error!',
								text: response.message || 'Failed to change password'
							});
						}
					},
					error: function() {
						Swal.fire({
							icon: 'error',
							title: 'Error!',
							text: 'An error occurred while changing password'
						});
					}
				});
			});

			// Initialize dropdown menu
			$('.dropdown-toggle').dropdown();
		});
	</script>
}