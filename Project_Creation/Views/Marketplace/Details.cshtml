@model Project_Creation.Models.ViewModels.ProductDetailsViewModel
@using System.Security.Claims

@{
    ViewData["Title"] = Model.Name;
}

<div class="container mt-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="Marketplace" asp-action="Index">Marketplace</a></li>
            <li class="breadcrumb-item"><a asp-controller="Marketplace" asp-action="Index" asp-route-category="@Model.CategoryName">@Model.CategoryName</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Name</li>
        </ol>
    </nav>

    <div class="card shadow">
        <div class="card-body">
            <div class="row">
                <!-- Product Images -->
                <div class="col-md-6 mb-4">
                    <div id="productCarousel" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-inner">
                            @if (Model.Images.Any())
                            {
                                for (int i = 0; i < Model.Images.Count; i++)
                                {
                                    <div class="carousel-item @(i == 0 ? "active" : "")">
                                        <img src="@Model.Images[i]" class="d-block w-100" alt="@Model.Name" style="height: 400px; object-fit: contain;">
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="carousel-item active">
                                    <img src="/images/no-image.png" class="d-block w-100" alt="No Image" style="height: 400px; object-fit: contain;">
                                </div>
                            }
                        </div>
                        @if (Model.Images.Count > 1)
                        {
                            <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Previous</span>
                            </button>
                            <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Next</span>
                            </button>
                        }
                    </div>

                    <!-- Thumbnail Navigation -->
                    @if (Model.Images.Count > 1)
                    {
                        <div class="row mt-2">
                            @for (int i = 0; i < Model.Images.Count; i++)
                            {
                                <div class="col-3 mb-2">
                                    <img src="@Model.Images[i]"
                                         class="img-thumbnail"
                                         alt="Thumbnail"
                                         style="cursor: pointer; height: 80px; object-fit: cover;"
                                         onclick="$('#productCarousel').carousel(@i)">
                                </div>
                            }
                        </div>
                    }
                </div>

                <!-- Product Info -->
                <div class="col-md-6">
                    <h1 class="mb-2">@Model.Name</h1>

                    <div class="mb-3">
                        <span class="badge bg-primary me-2">
                            <i class="fas fa-tags me-1"></i> @Model.CategoryName
                        </span>
                        <span class="badge bg-secondary">
                            <i class="fas fa-store me-1"></i> Sold by: @Model.BusinessName
                        </span>
                    </div>

                    <h3 class="text-primary mb-3">@Html.DisplayFor(model => model.Price)</h3>

                    <div class="mb-4">
                        @if (Model.InStock)
                        {
                            <div class="badge bg-success p-2">
                                <i class="fas fa-check-circle me-1"></i> In Stock (@Model.QuantityInStock available)
                            </div>
                        }
                        else
                        {
                            <div class="badge bg-danger p-2">
                                <i class="fas fa-times-circle me-1"></i> Out of Stock
                            </div>
                        }
                    </div>

                    <p class="mb-4">@Html.Raw(Model.Description)</p>

                    <div class="d-flex gap-2 mb-4">
                        @if (User.FindFirstValue(ClaimTypes.NameIdentifier) == Model.BusinessOwnerId.ToString())
                        {
                            <a href="@Url.Action("Edit", "Inventory1", new { id = Model.Id })" class="btn btn-primary">
                                <i class="fas fa-edit me-2"></i>Edit Product
                            </a>
                            <a href="@Url.Action("PublishToMarketplace", "Inventory1", new { id = Model.Id })" class="btn btn-success">
                                <i class="fas fa-edit me-2"></i> Edit Published Product
                            </a>
                        }
                        else
                        {
                            @if (Model.InStock)
                            {
                                <button type="button" class="btn btn-primary send-product-request" data-product-id="@Model.Id" data-product-name="@Model.Name" data-product-stock="@Model.QuantityInStock">
                                    <i class="fas fa-shopping-cart me-2"></i> Request Product
                                </button>
                            }
                            <button type="button" class="btn btn-outline-primary" onclick="window.location.href='@Url.Action("Index", "Chat", new { userId = Model.BusinessOwnerId })'">
                                <i class="fas fa-comment me-2"></i> Contact Seller
                            </button>
                        }
                    </div>

                    <div class="d-grid gap-2">
                        <a asp-controller="BOBusinessProfile"
                           asp-action="BusinessProfile"
                           asp-route-id="@Model.BusinessOwnerId"
                           asp-route-category="@Model.CategoryName"
                           class="btn btn-outline-primary">
                            <i class="fas fa-store me-2"></i> Visit @Model.BusinessName Store
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Related Products -->
    @if (Model.RelatedProducts.Any())
    {
        <div class="card shadow mt-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Other Products</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    @foreach (var product in Model.RelatedProducts)
                    {
                        <div class="col-md-3 mb-3">
                            <div class="card h-100 shadow-sm">
                                <img src="@product.MainImageUrl" class="card-img-top" alt="@product.Name" style="height: 150px; object-fit: cover;">
                                <div class="card-body">
                                    <h6 class="card-title">@product.Name</h6>
                                    <p class="fw-bold text-primary">@Html.DisplayFor(m => product.Price)</p>
                                </div>
                                <div class="card-footer text-center">
                                    <a href="@Url.Action("Details", "Marketplace", new { id = product.Id })" class="btn btn-sm btn-primary">
                                        View Details
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<!-- Product Request Modal -->
<div class="modal fade" id="productRequestModal" tabindex="-1" aria-labelledby="productRequestModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productRequestModalLabel">Request Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="productRequestForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="requestProductId" name="productId" />
                    <input type="hidden" id="requestProductStock" name="productStock" />

                    <div class="mb-3">
                        <label class="form-label">Product:</label>
                        <p class="form-control-static fw-bold" id="requestProductName"></p>
                    </div>

                    <div class="mb-3">
                        <label for="requestCustomerName" class="form-label">Your Name:</label>
                        <input type="text" class="form-control" id="requestCustomerName" name="customerName" value="@User.FindFirstValue(ClaimTypes.Name)" required />
                    </div>

                    <div class="mb-3">
                        <label for="requestQuantity" class="form-label">Quantity:</label>
                        <div class="input-group">
                            <input type="number" class="form-control" id="requestQuantity" name="quantity" min="1" required 
                                   onkeypress="return event.charCode >= 48 && event.charCode <= 57" 
                                   oninput="this.value = this.value.replace(/[^0-9]/g, '');" />
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">Quick Select</button>
                            <ul class="dropdown-menu dropdown-menu-end" id="quantityPresetList">
                                <!-- Quantity presets will be dynamically generated -->
                            </ul>
                        </div>
                        <small class="form-text text-muted available-stock">Available: 0</small>
                    </div>

                    <div class="mb-3">
                        <label for="requestMessage" class="form-label">Message:</label>
                        <textarea class="form-control" id="requestMessage" name="message" rows="3" placeholder="Additional details about your request..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary" id="sendRequestBtn" form="productRequestForm">Send Request</button>
            </div>
        </div>
    </div>
</div>

<!-- Product Request JS -->
@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize product carousel
            var carousel = new bootstrap.Carousel(document.getElementById('productCarousel'), {
                interval: 5000
            });

            // Prevent non-numeric characters in quantity input
            $('#requestQuantity').on('keydown', function(e) {
                // Allow: backspace, delete, tab, escape, enter
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13]) !== -1 ||
                    // Allow: Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
                    (e.keyCode === 65 && e.ctrlKey === true) ||
                    (e.keyCode === 67 && e.ctrlKey === true) ||
                    (e.keyCode === 86 && e.ctrlKey === true) ||
                    (e.keyCode === 88 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it's a number and stop the keypress if not
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });

            // Handle quantity input validation
            $('#requestQuantity').on('input', function() {
                // Remove any non-numeric characters
                $(this).val($(this).val().replace(/[^0-9]/g, ''));
                
                var max = parseInt($('#requestProductStock').val());
                var value = parseInt($(this).val());

                if (value > max) {
                    $(this).val(max);
                    alert(`Quantity cannot exceed available stock (${max})`);
                }
                if (value < 1) {
                    $(this).val(1);
                }
            });
            
            // Handle quantity preset selection
            $('.quantity-preset').on('click', function(e) {
                e.preventDefault();
                var presetValue = parseInt($(this).data('value'));
                var max = parseInt($('#requestProductStock').val());
                
                // Make sure preset doesn't exceed available stock
                if (presetValue > max) {
                    presetValue = max;
                }
                
                $('#requestQuantity').val(presetValue);
            });
        });

        // Product Request functionality
        $(document).ready(function() {
            // Handle product request button click
            $(document).on('click', '.send-product-request', function() {
                const productId = $(this).data('product-id');
                const productName = $(this).data('product-name');
                const productStock = $(this).data('product-stock');

                // Show the product request modal
                $('#productRequestModal').modal('show');
                $('#requestProductId').val(productId);
                $('#requestProductName').text(productName);
                $('#requestProductStock').val(productStock);
                $('.available-stock').text(`Available: ${productStock}`);
                
                // Set max attribute on quantity input
                $('#requestQuantity').attr('max', productStock);
                
                // Generate quantity presets (5 options dividing the available stock)
                generateQuantityPresets(productStock);
            });
            
            // Function to generate quantity presets
            function generateQuantityPresets(maxQuantity) {
                const $presetList = $('#quantityPresetList');
                $presetList.empty(); // Clear existing presets
                
                if (maxQuantity <= 0) {
                    return; // No stock available
                }
                
                // Calculate 5 steps
                for (let i = 1; i <= 5; i++) {
                    const value = Math.ceil((maxQuantity * i) / 5);
                    const uniqueValue = Math.min(value, maxQuantity); // Ensure we don't exceed max
                    
                    // Add preset option
                    $presetList.append(`<li><a class="dropdown-item quantity-preset" href="#" data-value="${uniqueValue}">${uniqueValue}</a></li>`);
                }
                
                // Re-attach click event for the new presets
                $('.quantity-preset').off('click').on('click', function(e) {
                    e.preventDefault();
                    const presetValue = parseInt($(this).data('value'));
                    $('#requestQuantity').val(presetValue);
                });
            }

            // Handle product request form submission
            $('#productRequestForm').submit(function(e) {
                e.preventDefault();

                const productId = $('#requestProductId').val();
                const quantity = $('#requestQuantity').val();
                const customerName = $('#requestCustomerName').val();
                const message = $('#requestMessage').val();

                // Validate form
                if (!quantity || quantity < 1) {
                    alert('Please enter a valid quantity');
                    return;
                }

                if (!customerName) {
                    alert('Please enter your name');
                    return;
                }

                const submitBtn = $('#sendRequestBtn');
                submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Sending...');

                const token = $('input[name="__RequestVerificationToken"]').val();

                // Send as POST request with JSON data
                $.ajax({
                    url: '/Inventory1/SendProductRequest',
                    type: 'POST',
                    contentType: 'application/json',
                    headers: {
                        'RequestVerificationToken': token
                    },
                    data: JSON.stringify({
                        productId: parseInt(productId),
                        quantity: parseInt(quantity),
                        customerName: customerName,
                        message: message
                    }),
                    success: function(response) {
                        if (response.success) {
                            $('#productRequestModal').modal('hide');

                            // Show success toast
                            const toast = `
                            <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
                                <div class="d-flex">
                                    <div class="toast-body">
                                        <i class="fas fa-check-circle me-2"></i> ${response.message}
                                    </div>
                                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                                </div>
                            </div>`;

                            $('.toast-container').append(toast);
                            $('.toast').toast('show');
                            $('#productRequestForm')[0].reset();
                        } else {
                            alert('Failed to send request: ' + (response.message || 'Unknown error'));
                        }
                    },
                    error: function(xhr) {
                        alert('An error occurred: ' +
                            (xhr.responseJSON?.message || 'Please try again later'));
                    },
                    complete: function() {
                        submitBtn.prop('disabled', false).html('Send Request');
                    }
                });
            });
        });
    </script>
}