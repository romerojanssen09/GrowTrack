@model Project_Creation.Models.ViewModels.MarketplaceViewModel

@{
    ViewData["Title"] = "Marketplace";
}

<div class="marketplace-container">
    <!-- Marketplace Header -->
    <div class="marketplace-header mx-3">
        <div class="header-content">
            <h1>Marketplace</h1>
            <p>Find quality products from our trusted sellers</p>
        </div>
    </div>

    <div class="marketplace-wrapper">
        <!-- Categories and Search -->
        <div class="filters-container">
            <!-- Top Categories -->
            <div class="category-selection d-flex flex-column flex-sm-row gap-2">
                <div class="dropdown main-category-dropdown">
                    <button class="btn dropdown-toggle custom-select w-100 text-start" type="button" id="mainCategoryDropdown">
                        <span id="selectedMainCategory">@(string.IsNullOrEmpty(Model.MainCategoryFilter) ? "All Categories" : Model.MainCategoryFilter)</span>
                    </button>
                    <div class="dropdown-menu w-100" id="mainCategoryList">
                        <a class="dropdown-item main-category-item @(string.IsNullOrEmpty(Model.MainCategoryFilter) ? "active" : "")" href="#" data-value="">All Categories</a>
                        @foreach (var mainCategory in ViewBag.MainCategories ?? new List<string>())
                        {
                            <a class="dropdown-item main-category-item @(mainCategory == ViewBag.CurrentMainCategory ? "active" : "")" 
                                href="#" 
                                data-value="@mainCategory">@mainCategory</a>
                        }
                    </div>
                </div>
                
                <div class="search-container">
                    <form asp-action="Index" method="get" class="search-form">
                        <div class="search-input-group ">
                            <input type="text" name="search" class="search-input" placeholder="Search products..." value="@Model.SearchQuery">
                            @if (!string.IsNullOrEmpty(Model.CategoryFilter))
                            {
                                <input type="hidden" name="category" value="@Model.CategoryFilter" />
                            }
                            @if (!string.IsNullOrEmpty(Model.MainCategoryFilter))
                            {
                                <input type="hidden" name="mainCategory" value="@Model.MainCategoryFilter" />
                            }
                            <button class="search-button" type="submit">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="marketplace-content">
            <div class="content-card">
                <!-- Main Products List -->
                <div class="products-container">
                    @if (Model.Products.Any())
                    {
                        <div class="products-header">
                            @if (!string.IsNullOrEmpty(Model.CategoryFilter))
                            {
                                <h4><i class="fas fa-tag me-2"></i>@Model.CategoryFilter</h4>
                            }
                            else if (!string.IsNullOrEmpty(Model.SearchQuery))
                            {
                                <h4><i class="fas fa-search me-2"></i>Results for "@Model.SearchQuery"</h4>
                            }
                            else
                            {
                                <h4><i class="fas fa-store me-2"></i>All Products</h4>
                            }
                        </div>

                        <div class="products-grid">
                            @foreach (var product in Model.Products)
                            {
                                <div class="product-card">
                                    <div class="product-image">
                                        <img src="@product.MainImageUrl" alt="@product.Name">
                                    </div>
                                    <div class="product-details">
                                        <h5 class="product-title">@product.Name</h5>
                                        <div class="product-meta">
                                            <span class="product-category"><i class="fas fa-tags me-1"></i> @product.CategoryName</span>
                                            <span class="product-seller">
                                                <i class="fas fa-store me-1"></i>
                                                <a href="@Url.RouteUrl("ViewBusinessProfile", new { id = product.BusinessOwnerId, category = product.CategoryName })">
                                                    @product.BusinessName
                                                </a>
                                            </span>
                                        </div>
                                        <p class="product-description">@Html.Raw(product.Description.Length > 100 ? product.Description.Substring(0, 100) + "..." : product.Description)</p>
                                        <div class="product-footer">
                                            <span class="product-price">@Html.DisplayFor(m => product.Price)</span>
                                            <a href="@Url.Action("Details", "Marketplace", new { id = product.Id })" class="product-button">
                                                View Details
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Pagination -->
                        @if (Model.TotalPages > 1)
                        {
                            <div class="pagination-container">
                                <div class="pagination">
                                    <a class="pagination-item @(Model.CurrentPage == 1 ? "disabled" : "")"
                                       href="@Url.Action("Index", "Marketplace", new { category = Model.CategoryFilter, search = Model.SearchQuery, page = Model.CurrentPage - 1 })">
                                        <i class="fas fa-chevron-left"></i>
                                    </a>

                                    @for (int i = 1; i <= Model.TotalPages; i++)
                                    {
                                        <a class="pagination-item @(Model.CurrentPage == i ? "active" : "")"
                                           href="@Url.Action("Index", "Marketplace", new { category = Model.CategoryFilter, search = Model.SearchQuery, page = i })">
                                            @i
                                        </a>
                                    }

                                    <a class="pagination-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")"
                                       href="@Url.Action("Index", "Marketplace", new { category = Model.CategoryFilter, search = Model.SearchQuery, page = Model.CurrentPage + 1 })">
                                        <i class="fas fa-chevron-right"></i>
                                    </a>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="empty-state">
                            <div class="empty-state-icon">
                                <i class="fas fa-search"></i>
                            </div>
                            <h4>No products found</h4>
                            <p>Try a different search term or category</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Modern Marketplace Styling */
    .marketplace-container {
        padding: 0 0 1.5rem 0;
        background-color: #faf6f2;
        min-height: calc(100vh - 60px);
    }

    /* Marketplace Header */
    .marketplace-header {
        background-color: #304251;
        color: white;
        border-radius: 12px;
        padding: 2rem 0;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    }

    .header-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 1rem;
    }

    .marketplace-header h1 {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .marketplace-header p {
        font-size: 1rem;
        opacity: 0.9;
        margin: 0;
    }

    .marketplace-wrapper {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 1rem;
    }

    /* Categories at Top */
    .categories-container {
        margin-bottom: 1.5rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        padding: 1rem;
        overflow: hidden;
    }

    .category-selection {
        display: flex;
        gap: 1rem;
    }

    .main-category-dropdown,
    .search-container {
        flex: 1;
        position: relative;
    }

    .dropdown {
        position: relative;
        z-index: 1000;
    }

    .custom-select {
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 4px;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        color: #495057;
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
        box-shadow: none;
        height: 50px;
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
    }

    .dropdown-toggle::after {
        content: '';
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        width: 0;
        height: 0;
        border-left: 6px solid transparent;
        border-right: 6px solid transparent;
        border-top: 6px solid #495057;
        margin: 0;
    }

    .dropdown-menu {
        position: absolute;
        left: 0;
        top: calc(100% + 2px);
        background-color: white;
        border-radius: 4px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        padding: 0.5rem;
        z-index: 9999;
        width: 100%;
        max-height: 300px;
        overflow-y: auto;
        display: none;
        border: 1px solid #ced4da;
    }

    .dropdown-menu.show {
        display: block !important;
        opacity: 1 !important;
        visibility: visible !important;
        transform: none !important;
        pointer-events: auto !important;
    }

    .dropdown-item {
        display: block;
        width: 100%;
        padding: 0.5rem 1rem;
        text-align: left;
        background: none;
        border: none;
        font-size: 0.9rem;
        color: #495057;
        cursor: pointer;
        border-radius: 4px;
        transition: background-color 0.2s ease;
        text-decoration: none;
    }

    .dropdown-item:hover {
        background-color: #f8f9fa;
        color: #f48c06;
    }

    .dropdown-item.active {
        background-color: #f48c06;
        color: white;
    }

    .main-category-item.active {
        background-color: #f48c06;
        color: white;
    }

    /* Main Content Styling */
    .marketplace-content {
        width: 100%;
        position: relative;
        z-index: 50;
    }

    .content-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        overflow: hidden;
    }

    /* Search Bar Styling */
    .search-container {
        padding: 0;
        border-bottom: none;
    }

    .search-form {
        margin: 0;
    }

    .search-input-group {
        display: flex;
        position: relative;
    }

    .search-input {
        flex-grow: 1;
        padding: 0.75rem 1rem;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 1rem;
        transition: all 0.2s ease;
        height: 50px;
    }

    .search-input:focus {
        border-color: #f48c06;
        box-shadow: 0 0 0 3px rgba(244, 140, 6, 0.15);
        outline: none;
    }

    .search-button {
        position: absolute;
        right: 5px;
        top: 5px;
        bottom: 5px;
        background: #f48c06;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 0 1.25rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .search-button:hover {
        background: #dc6803;
    }

    /* Products Container */
    .products-container {
        padding: 1.5rem;
    }

    .products-header {
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #f1f1f1;
    }

        .products-header h4 {
            margin: 0;
            color: #333;
            font-weight: 600;
        }

    /* Products Grid */
    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    /* Product Card */
    .product-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 3px 15px rgba(0,0,0,0.05);
        overflow: hidden;
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
        height: 100%;
        border: 1px solid #f1f1f1;
    }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(244, 140, 6, 0.1);
            border-color: #ffd8a8;
        }

    .product-image {
        height: 200px;
        overflow: hidden;
        position: relative;
    }

        .product-image::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 40px;
            background: linear-gradient(to top, rgba(255,255,255,0.8), rgba(255,255,255,0));
            z-index: 1;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

    .product-card:hover .product-image::after {
        opacity: 1;
    }

    .product-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.5s ease;
    }

    .product-card:hover .product-image img {
        transform: scale(1.05);
    }

    .product-details {
        padding: 1.25rem;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
    }

    .product-title {
        margin: 0 0 0.75rem;
        font-size: 1.1rem;
        color: #333;
        font-weight: 600;
    }

    .product-meta {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .product-category, .product-seller {
        font-size: 0.85rem;
        color: #666;
    }

        .product-seller a {
            color: #dc6803;
            text-decoration: none;
            font-weight: 500;
        }

            .product-seller a:hover {
                text-decoration: underline;
                color: #9a3412;
            }

    .product-description {
        font-size: 0.9rem;
        color: #555;
        margin-bottom: 1.25rem;
        flex-grow: 1;
        line-height: 1.5;
    }

    .product-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: auto;
    }

    .product-price {
        font-weight: 700;
        <!-- font-size: 1.2rem; -->
        color: #dc6803;
    }

    .product-button {
        background: transparent;
        color: #f48c06;
        border: 1px solid #304251;
        border-radius: 6px;
        padding: 0.5rem 1rem;
        font-size: 0.9rem;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.2s ease;
    }

        .product-button:hover {
            background: #f48c06;
            color: white;
        }

    /* Pagination */
    .pagination-container {
        margin-top: 2rem;
        display: flex;
        justify-content: center;
    }

    .pagination {
        display: flex;
        gap: 0.5rem;
    }

    .pagination-item {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        border-radius: 8px;
        background: white;
        color: #555;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.2s ease;
        border: 1px solid #f1f1f1;
    }

        .pagination-item:hover:not(.disabled) {
            background: #f48c06;
            color: white;
            border-color: #f48c06;
        }

        .pagination-item.active {
            background: #f48c06;
            color: white;
            border-color: #f48c06;
        }

        .pagination-item.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
    }

    .empty-state-icon {
        font-size: 3rem;
        color: #ffd8a8;
        margin-bottom: 1rem;
    }

    .empty-state h4 {
        color: #333;
        margin-bottom: 0.5rem;
    }

    .empty-state p {
        color: #666;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .products-grid {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        }
    }

    @@media (max-width: 576px) {
        .products-grid {
            grid-template-columns: 1fr;
        }

        .search-button {
            padding: 0 1rem;
        }
    }

    .filters-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        position: relative;
        z-index: 100;
    }

    .categories-container {
        margin-bottom: 1.5rem;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Set initial values based on URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const categoryParam = urlParams.get('category');
            const mainCategoryParam = urlParams.get('mainCategory');
            
            if (mainCategoryParam) {
                $('#selectedMainCategory').text(mainCategoryParam);
                $('.main-category-item').removeClass('active');
                $(`.main-category-item[data-value="${mainCategoryParam}"]`).addClass('active');
            }
            
            // Toggle dropdowns
            $('#mainCategoryDropdown').on('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // Toggle this dropdown
                const isVisible = $('#mainCategoryList').hasClass('show');
                
                // Close all dropdowns first
                $('.dropdown-menu').removeClass('show');
                
                // Then show this one if it wasn't visible
                if (!isVisible) {
                    $('#mainCategoryList').addClass('show');
                }
            });
            
            // Close dropdowns when clicking outside
            $(document).on('click', function(e) {
                if (!$(e.target).closest('.main-category-dropdown').length) {
                    $('#mainCategoryList').removeClass('show');
                }
            });
            
            // Handle main category selection
            $('.main-category-item').on('click', function(e) {
                e.preventDefault();
                
                const mainCategory = $(this).data('value');
                $('#selectedMainCategory').text($(this).text());
                
                // Update active state
                $('.main-category-item').removeClass('active');
                $(this).addClass('active');
                
                // Close dropdown
                $('#mainCategoryList').removeClass('show');
                
                // Apply filter
                applyFilters(mainCategory);
            });
            
            // Function to apply filters and redirect
            function applyFilters(mainCategory) {
                let url = '@Url.Action("Index", "Marketplace")';
                const params = [];
                
                if (mainCategory) {
                    params.push('mainCategory=' + encodeURIComponent(mainCategory));
                }
                
                const currentSearch = '@Model.SearchQuery';
                if (currentSearch) {
                    params.push('search=' + encodeURIComponent(currentSearch));
                }
                
                if (params.length > 0) {
                    url += '?' + params.join('&');
                }
                
                window.location.href = url;
            }
        });
    </script>
} 