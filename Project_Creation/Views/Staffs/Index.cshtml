@model IEnumerable<Project_Creation.Models.Entities.Staff>

@{
    ViewData["Title"] = "Staff Management";
    @using Project_Creation.Models.Entities
    @using Project_Creation.Data
    @using System.Security.Claims
    
    var limitReached = ViewBag.LimitReached ?? false;
    var currentStaffCount = ViewBag.CurrentStaffCount ?? 0;
    var staffLimit = ViewBag.StaffLimit ?? 5;
}

<div class="staff-container">
    <div class="d-flex align-items-center justify-content-between flex-sm-row flex-column gap-2">
        <h2 class="text-accent">Supervisor Management</h2>
        <div class="d-flex flex-column flex-sm-row gap-2 mb-2 align-items-center">
            <div class="staff-limit-info d-flex align-items-center">
                <span class="badge @(limitReached ? "bg-danger" : "bg-success") p-2 me-2">
                    <i class="fas @(limitReached ? "fa-exclamation-triangle" : "fa-info-circle") me-1"></i>
                    Staff Accounts: <strong>@currentStaffCount / @staffLimit</strong>
                </span>
                @if (limitReached)
                {
                    <span class="text-danger fst-italic small">Limit reached. Contact admin to increase.</span>
                }
            </div>
            <button type="button" class="btn btn-primary @(limitReached ? "disabled" : "")" 
                data-bs-toggle="modal" data-bs-target="@(limitReached ? "#staffLimitModal" : "#createStaffModal")">
                <i class="fas fa-plus me-2"></i>Add New Supervisor
            </button>
        </div>
    </div>
    <div class="card shadow-sm">
        <div class="card-body">
            <div class="table-responsive">
                <table id="staffTable" class="table table-striped table-hover table-fit">
                    <thead class="table-dark">
                        <tr>
                            <th>Supervisor Name</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Status</th>
                            <th>Access Level</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@Html.DisplayFor(modelItem => item.StaffName)</td>
                                <td>@Html.DisplayFor(modelItem => item.StaffSEmail)</td>
                                <td>@Html.DisplayFor(modelItem => item.StaffPhone)</td>
                                <td>
                                    <span class="badge rounded-pill @(item.IsActive == AccountStatus.Active ? "bg-success" :
                                        item.IsActive == AccountStatus.Pending ? "bg-warning" : "bg-danger")"
                                    @if (item.IsActive == AccountStatus.Pending)
                                    {
                                        @:title="Pending status can change to Active when staff creates their password, or it can be manually set to active."
                                    }>
                                        @item.IsActive
                                    </span>
                                </td>
                                <td>
                                    @foreach (var accessLevel in Enum.GetValues(typeof(StaffAccessLevel)))
                                    {
                                        if ((int)accessLevel > 0 && item.StaffAccessLevel.HasFlag((StaffAccessLevel)accessLevel))
                                        {
                                            <span class="badge bg-info me-1">@accessLevel</span>
                                        }
                                    }
                                </td>
                                <td class="text-end">
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-outline-info details-btn" data-id="@item.Id" title="Details">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-warning edit-btn" data-id="@item.Id" title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger delete-btn" data-id="@item.Id" title="Delete">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Create Staff Modal -->
<div class="modal fade" id="createStaffModal" tabindex="-1" aria-labelledby="createStaffModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="createStaffModalLabel">Add New Staff Member</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createStaffForm" asp-action="Create">
                <div class="modal-body">
                    <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
                    <div class="mb-3">
                        <label class="form-label">Staff Name</label>
                        <input name="StaffName" class="form-control" required />
                        <span class="text-danger" data-valmsg-for="StaffName"></span>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input name="StaffSEmail" type="email" class="form-control" required />
                        <span class="text-danger" data-valmsg-for="StaffSEmail"></span>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Phone</label>
                        <input name="StaffPhone" class="form-control" required />
                        <span class="text-danger" data-valmsg-for="StaffPhone"></span>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Initial Password</label>
                        <div class="input-group">
                            <input name="Password" type="password" class="form-control" id="staffPassword" required />
                            <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <div class="form-text">Set an initial password for the supervisor. They can change it later.</div>
                        <span class="text-danger" data-valmsg-for="Password"></span>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Access Permissions</label>
                        <div class="row g-3">
                            @foreach (var accessLevel in Enum.GetValues(typeof(StaffAccessLevel)))
                            {
                                if ((int)accessLevel > 0)
                                {
                                    <div class="col-md-6">
                                        <div class="form-check form-switch d-flex gap-2">
                                            <input class="form-check-input access-checkbox" type="checkbox"
                                                   id="create_@accessLevel" name="StaffAccessLevel" value="@((int)accessLevel)">
                                            <label class="form-check-label" for="create_@accessLevel">@accessLevel</label>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" id="createSubmitBtn">
                        <span id="createSubmitText">Create</span>
                        <span id="createSpinner" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Staff Limit Reached Modal -->
<div class="modal fade" id="staffLimitModal" tabindex="-1" aria-labelledby="staffLimitModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="staffLimitModalLabel"><i class="fas fa-exclamation-triangle me-2"></i>Staff Limit Reached</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="text-center mb-4">
                    <i class="fas fa-user-slash fa-4x text-danger mb-3"></i>
                    <h4>You've reached your staff account limit!</h4>
                </div>
                <p>You currently have <strong>@currentStaffCount</strong> staff accounts, which is the maximum allowed for your business account.</p>
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    <span>To increase your staff account limit, please contact the administrator.</span>
                </div>
                <p>Options to manage your staff accounts:</p>
                <ul>
                    <li>Deactivate unused staff accounts</li>
                    <li>Delete staff accounts that are no longer needed</li>
                    <li>Contact administrator to request a limit increase</li>
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Details Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title">Staff Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="detailsContent">
                <!-- Content will be loaded here via AJAX -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-white">
                <h5 class="modal-title">Edit Staff Member</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editStaffForm" method="post">
            @Html.AntiForgeryToken()
                <div class="modal-body" id="editContent">
                    <!-- Content will be loaded here via AJAX -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" id="editSubmitBtn">
                        <span id="editSubmitText">Save Changes</span>
                        <span id="editSpinner" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Form switch styling */
        .form-switch .form-check-input {
            width: 2.5em;
            height: 1.5em;
            cursor: pointer;
            background-color: #adb5bd;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e");
            background-position: left center;
            transition: background-position 0.15s ease-in-out;
        }

        .form-switch .form-check-input:checked {
            background-color: #0d6efd;
            background-position: right center;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e");
        }

        .form-switch .form-check-input:focus {
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }
        
        /* Table and container styles */
        .table-responsive {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
            width: 100%;
        }
        
        .table-fit {
            width: 100%;
            table-layout: fixed;
            margin-bottom: 0;
        }
        
        .table-fit th, .table-fit td {
            padding: 0.5rem;
            vertical-align: middle;
            word-break: break-word;
        }
        
        /* Column widths */
        .table-fit th:nth-child(1), .table-fit td:nth-child(1) { min-width: 120px; }
        .table-fit th:nth-child(2), .table-fit td:nth-child(2) { min-width: 180px; }
        .table-fit th:nth-child(3), .table-fit td:nth-child(3) { min-width: 120px; }
        .table-fit th:nth-child(4), .table-fit td:nth-child(4) { min-width: 100px; }
        .table-fit th:nth-child(5), .table-fit td:nth-child(5) { min-width: 200px; }
        .table-fit th:nth-child(6), .table-fit td:nth-child(6) { min-width: 120px; }
        
        .staff-container { padding: 0 20px 20px !important; }
        
        /* Mobile styles */
        @@media (max-width: 767.98px) {
            .staff-container { padding: 0 10px 10px !important; }
            .table-fit { font-size: 0.85rem; }
            .table-fit th { font-size: 0.8rem; }
            
            /* Scroll indicator */
            .table-responsive::after {
                content: '→';
                position: absolute;
                right: 15px;
                top: 50%;
                transform: translateY(-50%);
                color: rgba(0,0,0,0.3);
                font-size: 1.5rem;
                animation: scroll-hint 1.5s ease-in-out infinite;
                pointer-events: none;
                opacity: 0.7;
                display: block;
            }
        }
        
        @@keyframes scroll-hint {
            0%, 100% { opacity: 0.3; }
            50% { opacity: 0.7; }
        }
    </style>
}

@section Scripts {
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(document).ready(function() {
            // Toggle password visibility
            $('#togglePassword').click(function() {
                const passwordField = $('#staffPassword');
                const passwordFieldType = passwordField.attr('type');
                const toggleIcon = $(this).find('i');
                
                if (passwordFieldType === 'password') {
                    passwordField.attr('type', 'text');
                    toggleIcon.removeClass('fa-eye').addClass('fa-eye-slash');
                } else {
                    passwordField.attr('type', 'password');
                    toggleIcon.removeClass('fa-eye-slash').addClass('fa-eye');
                }
            });
            
            // Toggle edit password visibility
            $('#toggleEditPassword').click(function() {
                const passwordField = $('#editStaffPassword');
                const passwordFieldType = passwordField.attr('type');
                const toggleIcon = $(this).find('i');
                
                if (passwordFieldType === 'password') {
                    passwordField.attr('type', 'text');
                    toggleIcon.removeClass('fa-eye').addClass('fa-eye-slash');
                } else {
                    passwordField.attr('type', 'password');
                    toggleIcon.removeClass('fa-eye-slash').addClass('fa-eye');
                }
            });
            
            // Handle staff creation form submission
            $('#createStaffForm').on('submit', function(e) {
                e.preventDefault();
                
                // Show loading state
                $('#createSubmitBtn').prop('disabled', true);
                $('#createSubmitText').addClass('d-none');
                $('#createSpinner').removeClass('d-none');
                
                // Get form data
                const staffData = {
                    StaffName: $('input[name="StaffName"]').val(),
                    StaffSEmail: $('input[name="StaffSEmail"]').val(),
                    StaffPhone: $('input[name="StaffPhone"]').val(),
                    Password: $('input[name="Password"]').val(),
                    StaffAccessLevel: 0,
                    Role: 'Staff'
                };
                
                // Calculate access level from checkboxes
                $('input[name="StaffAccessLevel"]:checked').each(function() {
                    staffData.StaffAccessLevel += parseInt($(this).val());
                });
                
                // Send AJAX request
                $.ajax({
                    url: '@Url.Action("Create", "Staffs")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(staffData),
                    success: function(response) {
                        // Reset form and close modal
                        $('#createStaffForm')[0].reset();
                        $('#createStaffModal').modal('hide');
                        
                        // Show success message
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Supervisor account created successfully!'
                        }).then(() => {
                            // Reload the page to show the new staff member
                            location.reload();
                        });
                    },
                    error: function(xhr) {
                        // Show error message
                        let errorMessage = 'An error occurred while creating the supervisor account.';
                        
                        if (xhr.responseJSON) {
                            if (xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            } else {
                                // Handle validation errors
                                const errors = [];
                                for (const key in xhr.responseJSON) {
                                    if (xhr.responseJSON.hasOwnProperty(key)) {
                                        errors.push(xhr.responseJSON[key]);
                                    }
                                }
                                if (errors.length > 0) {
                                    errorMessage = errors.join('<br>');
                                }
                            }
                        }
                        
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            html: errorMessage
                        });
                    },
                    complete: function() {
                        // Reset button state
                        $('#createSubmitBtn').prop('disabled', false);
                        $('#createSubmitText').removeClass('d-none');
                        $('#createSpinner').addClass('d-none');
                    }
                });
            });
            
            // Handle details button click
            $('.details-btn').on('click', function() {
                const staffId = $(this).data('id');
                
                $.ajax({
                    url: '/Staffs/Details/' + staffId,
                    type: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    success: function(data) {
                        $('#detailsContent').html(data);
                        $('#detailsModal').modal('show');
                    },
                    error: function(xhr, status, error) {
                        console.error('Details request error:', error);
                        console.error('Status:', status);
                        console.error('Response:', xhr.responseText);
                        
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to load staff details'
                        });
                    }
                });
            });
            
            // Handle edit button click
            $('.edit-btn').on('click', function() {
                const staffId = $(this).data('id');
                
                $.ajax({
                    url: '/Staffs/Edit/' + staffId,
                    type: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    success: function(data) {
                        $('#editContent').html(data);
                        $('#editModal').modal('show');
                        
                        // Initialize toggle password button for edit form
                        $('#toggleEditPassword').on('click', function() {
                            const passwordField = $('#editStaffPassword');
                            const passwordFieldType = passwordField.attr('type');
                            const toggleIcon = $(this).find('i');
                            
                            if (passwordFieldType === 'password') {
                                passwordField.attr('type', 'text');
                                toggleIcon.removeClass('fa-eye').addClass('fa-eye-slash');
                            } else {
                                passwordField.attr('type', 'password');
                                toggleIcon.removeClass('fa-eye-slash').addClass('fa-eye');
                            }
                        });
                    },
                    error: function(xhr, status, error) {
                        console.error('Edit request error:', error);
                        console.error('Status:', status);
                        console.error('Response:', xhr.responseText);
                        
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to load staff edit form'
                        });
                    }
                });
            });
            
            // Handle edit form submission
            $('#editStaffForm').on('submit', function(e) {
                e.preventDefault();
                
                // Show loading state
                $('#editSubmitBtn').prop('disabled', true);
                $('#editSubmitText').addClass('d-none');
                $('#editSpinner').removeClass('d-none');
                
                // Calculate access level from checkboxes
                let accessLevel = 0;
                $('#editContent .access-checkbox:checked').each(function() {
                    accessLevel += parseInt($(this).val());
                });
                
                // Set the hidden input value
                $('#StaffAccessLevel').val(accessLevel);
                
                // Get form data
                const formData = new FormData(this);
                
                // Get staff ID from the form data or hidden field
                const staffId = $('#editContent input[type="hidden"][name="Id"]').val();
                
                // Send AJAX request
                $.ajax({
                    url: '/Staffs/Edit/' + staffId,
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function() {
                        // Close modal
                        $('#editModal').modal('hide');
                        
                        // Show success message
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Supervisor account updated successfully!'
                        }).then(() => {
                            // Reload the page to show the updated staff member
                            location.reload();
                        });
                    },
                    error: function(xhr, status, error) {
                        // Log error details
                        console.error('Edit submission error:', error);
                        console.error('Status:', status);
                        console.error('Response:', xhr.responseText);
                        
                        // Show error message
                        let errorMessage = 'An error occurred while updating the supervisor account.';
                        
                        if (xhr.responseJSON) {
                            const errors = [];
                            for (const key in xhr.responseJSON) {
                                if (xhr.responseJSON.hasOwnProperty(key)) {
                                    errors.push(xhr.responseJSON[key]);
                                }
                            }
                            if (errors.length > 0) {
                                errorMessage = errors.join('<br>');
                            }
                        }
                        
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            html: errorMessage
                        });
                    },
                    complete: function() {
                        // Reset button state
                        $('#editSubmitBtn').prop('disabled', false);
                        $('#editSubmitText').removeClass('d-none');
                        $('#editSpinner').addClass('d-none');
                    }
                });
            });
            
            // Handle delete button click
            $('.delete-btn').on('click', function() {
                const staffId = $(this).data('id');
                const staffRow = $(this).closest('tr');
                
                Swal.fire({
                    title: 'Are you sure?',
                    text: "This will permanently delete this supervisor account. This action cannot be undone.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/Staffs/Delete/' + staffId,
                            type: 'POST',
                            success: function() {
                                // Remove the row from the table
                                staffRow.fadeOut(400, function() {
                                    $(this).remove();
                                });
                                
                                // Show success message
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Deleted!',
                                    text: 'The supervisor account has been deleted.',
                                    timer: 1500,
                                    showConfirmButton: false
                                });
                            },
                            error: function(xhr, status, error) {
                                console.error('Delete request error:', error);
                                console.error('Status:', status);
                                console.error('Response:', xhr.responseText);
                                
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'Failed to delete the supervisor account'
                                });
                            }
                        });
                    }
                });
            });
        });
    </script>
}
