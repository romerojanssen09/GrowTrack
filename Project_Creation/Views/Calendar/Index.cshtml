@section Styles {
    <style>
        /* :root { */
        /*     --primary-color: #4361ee; */
        /*     --secondary-color: #3f37c9; */
        /*     --accent-color: #4895ef; */
        /*     --light-color: #f8f9fa; */
        /*     --dark-color: #212529; */
        /*     --success-color: #4cc9f0; */
        /*     --danger-color: #f72585; */
        /* } */

        body {
            background-color: #f5f7fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .container {
            max-width: 1400px;
        }

        .header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 1.5rem;
            border-radius: 10px;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .calendar-container {
            background-color: white;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            height: 100%;
        }

        .todo-container {
            background-color: white;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            height: 100%;
        }

        .task-form {
            background-color: var(--light-color);
            padding: 1.5rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
        }

        .task-list {
            max-height: 500px;
            overflow-y: auto;
            padding-right: 10px;
        }

        .task-item {
            padding: 12px 15px;
            margin-bottom: 10px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            border-left: 4px solid var(--primary-color);
        }

        .task-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .task-item.completed {
            opacity: 0.7;
            border-left-color: #adb5bd;
        }

        .task-item.completed .task-title {
            text-decoration: line-through;
            color: #6c757d;
        }

        .task-title {
            flex-grow: 1;
            margin: 0 15px;
            font-weight: 500;
        }

        .task-time {
            font-size: 0.85rem;
            color: var(--accent-color);
            font-weight: 500;
            min-width: 70px;
            text-align: right;
        }

        .task-actions .btn {
            padding: 5px 8px;
            margin-left: 5px;
        }

        .badge-pill {
            padding: 5px 10px;
            font-weight: 500;
        }

        .fc .fc-event {
            cursor: default;
            border-radius: 4px;
            font-size: 0.85rem;
            padding: 2px 5px;
        }

        .completed-event {
            opacity: 0.7;
            text-decoration: line-through;
            background-color: #adb5bd !important;
            border-color: #adb5bd !important;
        }

        .priority-high {
            border-left-color: var(--danger-color);
        }

        .priority-medium {
            border-left-color: #ff9f1c;
        }

        .priority-low {
            border-left-color: #2ec4b6;
        }

        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }

        @@media (max-width: 768px) {
            .header h1 {
                font-size: 1.8rem;
            }

            .task-item {
                flex-wrap: wrap;
            }

            .task-time {
                width: 100%;
                text-align: left;
                margin-top: 5px;
                margin-left: 15px;
            }
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            border-radius: 0.3rem 0.3rem 0 0;
        }

        .modal-title {
            font-weight: 600;
        }

        .btn-close {
            filter: brightness(0) invert(1);
        }
    </style>
}

<div class="container mt-4 mb-5">
    <div class="header text-center">
        <h1 class="text-primary"><i class="fas fa-calendar-check me-2"></i>Task Scheduler</h1>
        <p class="mb-0 text-primary">Organize your tasks and schedule efficiently</p>
    </div>

    <div class="row g-4">
        <div class="col-lg-8">
            <div class="calendar-container">
                <div class="d-flex justify-content-end mb-3">
                    <button class="btn btn-primary" id="openAddTaskModal">
                        <i class="fas fa-plus me-2"></i>Add New Task
                    </button>
                </div>
                <div id="calendar"></div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="todo-container">
                <h4 class="mt-2 mb-3"><i class="fas fa-tasks me-2"></i>Today's Tasks</h4>
                <div class="d-flex justify-content-between mb-3">
                    <span class="badge bg-primary rounded-pill" id="taskCount">0 tasks</span>
                    <div>
                        <button class="btn btn-sm btn-outline-secondary me-2" id="filterAll">All</button>
                        <button class="btn btn-sm btn-outline-secondary" id="filterPending">Pending</button>
                    </div>
                </div>
                <div class="task-list" id="todayTasks">
                    <div class="text-center py-4 text-muted">
                        <i class="fas fa-clipboard-list fa-2x mb-2"></i>
                        <p>No tasks for today</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Task Modal -->
<div class="modal fade" id="taskModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskModalTitle">Add New Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="taskForm">
                    <input type="hidden" id="taskId" value="" />
                    <div class="mb-3">
                        <label for="taskTitle" class="form-label">Task Title*</label>
                        <input type="text" class="form-control" id="taskTitle" placeholder="What needs to be done?" required>
                    </div>
                    <div class="row g-2 mb-3">
                        <div class="col-md-6">
                            <label for="taskDate" class="form-label">Date*</label>
                            <input type="date" class="form-control" id="taskDate" required>
                        </div>
                        <div class="col-md-6">
                            <label for="taskTime" class="form-label">Time</label>
                            <input type="time" class="form-control" id="taskTime">
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="taskPriority" class="form-label">Priority</label>
                        <select class="form-select" id="taskPriority">
                            <option value="low">Low</option>
                            <option value="medium" selected>Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="taskNotes" class="form-label">Notes (optional)</label>
                        <textarea class="form-control" id="taskNotes" rows="3" placeholder="Additional details..."></textarea>
                    </div>
                    <div class="mb-3" id="completionStatusContainer" style="display:none;">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="taskCompletionStatus">
                            <label class="form-check-label" for="taskCompletionStatus">
                                Mark as completed
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveTask">Save Task</button>
            </div>
        </div>
    </div>
</div>

<!-- Task Details Modal -->
<div class="modal fade" id="taskDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Task Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="taskDetailsContent">
                <!-- Content will be dynamically populated -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-outline-primary" id="editTaskBtn">Edit Task</button>
                <button type="button" class="btn btn-danger" id="deleteTaskBtn">Delete Task</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- FullCalendar JS -->
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize calendar
            var calendarEl = document.getElementById('calendar');
            var tasks = []; // Will be loaded from the database

            // Set today's date as default in the date picker
            var today = new Date();
            var todayStr = today.toISOString().split('T')[0];
            document.getElementById('taskDate').value = todayStr;

            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                editable: false,
                selectable: false,
                events: [], // Will be populated after loading tasks
                eventClick: function(info) {
                    showTaskDetails(info.event);
                },
                eventContent: function(arg) {
                    // Custom event content with priority indicator
                    let priorityDot = '';
                    if (arg.event.extendedProps.priority === 'High') {
                        priorityDot = '<i class="fas fa-circle text-danger" style="font-size: 0.5rem; margin-right: 3px;"></i>';
                    } else if (arg.event.extendedProps.priority === 'Medium') {
                        priorityDot = '<i class="fas fa-circle text-warning" style="font-size: 0.5rem; margin-right: 3px;"></i>';
                    }

                    return {
                        html: `${priorityDot}${arg.event.title}`
                    };
                }
            });

            calendar.render();

            // Load tasks from the database
            loadTasks();
            
            // Initialize the task modal
            var taskModal = new bootstrap.Modal(document.getElementById('taskModal'));
            var taskDetailsModal = new bootstrap.Modal(document.getElementById('taskDetailsModal'));
            
            // Set up the event handlers for modal buttons
            document.getElementById('openAddTaskModal').addEventListener('click', function() {
                resetTaskForm();
                document.getElementById('taskModalTitle').textContent = 'Add New Task';
                document.getElementById('saveTask').setAttribute('data-mode', 'add');
                document.getElementById('completionStatusContainer').style.display = 'none';
                taskModal.show();
            });
            
            document.getElementById('saveTask').addEventListener('click', function() {
                var mode = this.getAttribute('data-mode');
                if (mode === 'add') {
                    addTask();
                } else {
                    updateTask(parseInt(document.getElementById('taskId').value));
                }
            });

            // Event handler for Edit button in details modal
            document.getElementById('editTaskBtn').addEventListener('click', function() {
                var taskId = parseInt(this.getAttribute('data-task-id'));
                loadTaskForEditing(taskId);
                taskDetailsModal.hide();
            });
            
            // Event handler for Delete button in details modal
            document.getElementById('deleteTaskBtn').addEventListener('click', function() {
                var taskId = this.getAttribute('data-task-id');
                console.log('Delete button clicked with taskId:', taskId); // Debug log
                if (taskId) {
                    deleteTask(parseInt(taskId));
                    taskDetailsModal.hide();
                } else {
                    console.error('No task ID found on delete button');
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Could not find task ID'
                    });
                }
            });

            function loadTasks() {
                fetch('/Calendar/GetTasks')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        tasks = data;
                        
                        // Clear existing events
                        calendar.getEvents().forEach(event => event.remove());
                        
                        // Add events to calendar
                        tasks.forEach(task => {
                            calendar.addEvent({
                                id: task.id.toString(), // Ensure consistent ID format as string
                                title: task.title,
                                start: task.time ? `${task.date}T${formatTime(task.time)}:00` : task.date,
                                allDay: !task.time,
                                extendedProps: {
                                    taskId: task.id,
                                    completed: task.isCompleted,
                                    priority: task.priority,
                                    notes: task.notes
                                },
                                color: getPriorityColor(task.priority),
                                classNames: task.isCompleted ? ['completed-event'] : []
                            });
                        });
                        
                        // Show today's tasks
                        showTodaysTasks();
                    })
                    .catch(error => {
                        console.error('Error loading tasks:', error);
                        showAlert('Failed to load tasks', 'danger');
                    });
            }

            function formatTime(timeObj) {
                // Convert TimeOnly object to string format HH:mm
                if (typeof timeObj === 'string') {
                    return timeObj.substring(0, 5); // Extract HH:mm part
                }
                return `${timeObj.hours.toString().padStart(2, '0')}:${timeObj.minutes.toString().padStart(2, '0')}`;
            }

            // Allow adding task with Enter key
            document.getElementById('taskTitle').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    addTask();
                }
            });

            // Filter buttons
            document.getElementById('filterAll').addEventListener('click', function() {
                showTodaysTasks('all');
                this.classList.remove('btn-outline-secondary');
                this.classList.add('btn-primary');
                document.getElementById('filterPending').classList.remove('btn-primary');
                this.classList.add('btn-outline-secondary');
            });

            document.getElementById('filterPending').addEventListener('click', function() {
                showTodaysTasks('pending');
                this.classList.remove('btn-outline-secondary');
                this.classList.add('btn-primary');
                document.getElementById('filterAll').classList.remove('btn-primary');
                document.getElementById('filterAll').classList.add('btn-outline-secondary');
            });

            function addTask() {
                var title = document.getElementById('taskTitle').value.trim();
                var date = document.getElementById('taskDate').value;
                var time = document.getElementById('taskTime').value;
                var prioritySelect = document.getElementById('taskPriority');
                var priorityValue = prioritySelect.value;
                var notes = document.getElementById('taskNotes').value.trim();

                if (!validateTaskForm()) return;

                // Create task object
                var task = {
                    title: title,
                    date: date,
                    time: time || null,
                    priority: priorityValue.charAt(0).toUpperCase() + priorityValue.slice(1), // Capitalize first letter
                    notes: notes,
                    isCompleted: false
                };

                // Send task to server
                fetch('/Calendar/AddTask', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(task)
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Add the new task to our local array
                        tasks.push(data.task);
                        
                        // Add to calendar
                        calendar.addEvent({
                            id: data.task.id.toString(), // Ensure consistent ID format as string
                            title: data.task.title,
                            start: data.task.time ? `${data.task.date}T${formatTime(data.task.time)}:00` : data.task.date,
                            allDay: !data.task.time,
                            extendedProps: {
                                taskId: data.task.id,
                                completed: data.task.isCompleted,
                                priority: data.task.priority,
                                notes: data.task.notes
                            },
                            color: getPriorityColor(data.task.priority)
                        });

                        // Close the modal
                        taskModal.hide();
                        
                        // Refresh today's tasks list
                        showTodaysTasks();

                        // Show success message
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'Task added successfully',
                            timer: 2000,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to add task'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error adding task:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to add task: ' + error.message
                    });
                });
            }
            
            function validateTaskForm() {
                var title = document.getElementById('taskTitle').value.trim();
                var date = document.getElementById('taskDate').value;
                
                if (!title) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Required Field',
                        text: 'Please enter a task title'
                    });
                    document.getElementById('taskTitle').focus();
                    return false;
                }

                if (!date) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Required Field',
                        text: 'Please select a date'
                    });
                    document.getElementById('taskDate').focus();
                    return false;
                }
                
                return true;
            }

            function loadTaskForEditing(taskId) {
                const task = tasks.find(t => t.id === taskId);
                if (!task) return;
                
                // Set form title to Edit mode
                document.getElementById('taskModalTitle').textContent = 'Edit Task';
                document.getElementById('saveTask').setAttribute('data-mode', 'edit');
                
                // Fill the form with task details
                document.getElementById('taskId').value = task.id;
                document.getElementById('taskTitle').value = task.title;
                document.getElementById('taskDate').value = new Date(task.date).toISOString().split('T')[0];
                document.getElementById('taskTime').value = task.time ? formatTime(task.time) : '';
                document.getElementById('taskPriority').value = task.priority.toLowerCase();
                document.getElementById('taskNotes').value = task.notes || '';
                
                // Show and set completion status
                document.getElementById('completionStatusContainer').style.display = 'block';
                document.getElementById('taskCompletionStatus').checked = task.isCompleted;
                
                // Open the modal
                taskModal.show();
            }

            function updateTask(taskId) {
                var title = document.getElementById('taskTitle').value.trim();
                var date = document.getElementById('taskDate').value;
                var time = document.getElementById('taskTime').value;
                var prioritySelect = document.getElementById('taskPriority');
                var priorityValue = prioritySelect.value;
                var notes = document.getElementById('taskNotes').value.trim();
                var isCompleted = document.getElementById('taskCompletionStatus').checked;

                if (!validateTaskForm()) return;

                // Create updated task object
                var updatedTask = {
                    id: taskId,
                    title: title,
                    date: date,
                    time: time || null,
                    priority: priorityValue.charAt(0).toUpperCase() + priorityValue.slice(1),
                    notes: notes,
                    isCompleted: isCompleted
                };

                // Send updated task to server
                fetch('/Calendar/UpdateTask', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updatedTask)
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Update the task in our local array
                        const taskIndex = tasks.findIndex(t => t.id === taskId);
                        if (taskIndex !== -1) {
                            tasks[taskIndex] = data.task;
                        }

                        // Remove all instances of this task from the calendar
                        cleanupTaskEvents(taskId);

                        // Add the updated task to calendar
                        calendar.addEvent({
                            id: data.task.id.toString(), // Ensure consistent ID format as string
                            title: data.task.title,
                            start: data.task.time ? `${data.task.date}T${formatTime(data.task.time)}:00` : data.task.date,
                            allDay: !data.task.time,
                            extendedProps: {
                                taskId: data.task.id,
                                completed: data.task.isCompleted,
                                priority: data.task.priority,
                                notes: data.task.notes
                            },
                            color: getPriorityColor(data.task.priority),
                            classNames: data.task.isCompleted ? ['completed-event'] : []
                        });

                        // Close the modal
                        taskModal.hide();

                        // Refresh today's tasks list
                        showTodaysTasks();

                        // Show success message
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'Task updated successfully',
                            timer: 2000,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to update task'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error updating task:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to update task: ' + error.message
                    });
                });
            }

            function deleteTask(taskId) {
                // Log the task ID being deleted
                console.log('Attempting to delete task with ID:', taskId);

                if (!taskId) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Invalid task ID'
                    });
                    return;
                }

                // Verify task exists in our local array
                const taskExists = tasks.some(t => t.id === taskId);
                console.log('Task exists in local array:', taskExists);

                if (!taskExists) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Task not found in local data'
                    });
                    return;
                }

                Swal.fire({
                    title: 'Are you sure?',
                    text: "This task will be permanently deleted!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Get the current URL and construct the delete URL
                        const baseUrl = window.location.origin;
                        const deleteUrl = `${baseUrl}/Calendar/DeleteTask/${taskId}`;
                        
                        console.log('Sending delete request to:', deleteUrl);

                        fetch(deleteUrl, {
                            method: 'DELETE',
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            credentials: 'same-origin'
                        })
                        .then(async response => {
                            console.log('Delete response status:', response.status);
                            
                            try {
                                const data = await response.json();
                                console.log('Delete response data:', data);
                                
                                if (!response.ok) {
                                    throw new Error(data.message || 'Failed to delete task');
                                }
                                return data;
                            } catch (error) {
                                console.error('Error parsing response:', error);
                                if (response.status === 404) {
                                    throw new Error(`Task not found with ID: ${taskId}`);
                                }
                                throw error;
                            }
                        })
                        .then(data => {
                            if (data.success) {
                                // Remove from tasks array
                                tasks = tasks.filter(t => t.id !== taskId);
                                console.log('Task removed from local array');

                                // Remove all instances from calendar
                                cleanupTaskEvents(taskId);
                                console.log('Task removed from calendar');

                                // Refresh today's tasks list
                                showTodaysTasks();
                                console.log('Today\'s tasks refreshed');

                                Swal.fire({
                                    icon: 'success',
                                    title: 'Deleted!',
                                    text: data.message || 'Task has been deleted.',
                                    timer: 2000,
                                    showConfirmButton: false
                                });
                            } else {
                                throw new Error(data.message || 'Failed to delete task');
                            }
                        })
                        .catch(error => {
                            console.error('Error deleting task:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: error.message || 'Failed to delete task'
                            });
                        });
                    }
                });
            }

            function showTodaysTasks(filter = 'all') {
                var todayTasksEl = document.getElementById('todayTasks');
                todayTasksEl.innerHTML = '';

                var todaysTasks = tasks.filter(task => {
                    const taskDate = new Date(task.date);
                    const todayDate = new Date(todayStr);
                    return taskDate.toDateString() === todayDate.toDateString();
                });

                if (filter === 'pending') {
                    todaysTasks = todaysTasks.filter(task => !task.isCompleted);
                }

                // Update task count badge
                document.getElementById('taskCount').textContent =
                    `${todaysTasks.length} ${todaysTasks.length === 1 ? 'task' : 'tasks'}`;

                if (todaysTasks.length === 0) {
                    todayTasksEl.innerHTML = `
                        <div class="text-center py-4 text-muted">
                            <i class="fas fa-clipboard-list fa-2x mb-2"></i>
                            <p>No tasks found</p>
                        </div>
                    `;
                    return;
                }

                // Sort tasks by priority and time
                todaysTasks.sort((a, b) => {
                    // High priority first
                    if (a.priority === 'High' && b.priority !== 'High') return -1;
                    if (b.priority === 'High' && a.priority !== 'High') return 1;

                    // Medium priority next
                    if (a.priority === 'Medium' && b.priority === 'Low') return -1;
                    if (b.priority === 'Medium' && a.priority === 'Low') return 1;

                    // Then by time (tasks with time come first, then sorted by time)
                    if (a.time && b.time) return a.time.localeCompare(b.time);
                    if (a.time) return -1;
                    if (b.time) return 1;

                    // Finally by creation time
                    return new Date(a.createdAt) - new Date(b.createdAt);
                });

                todaysTasks.forEach(task => {
                    var taskEl = document.createElement('div');
                    taskEl.className = `task-item ${task.isCompleted ? 'completed' : ''} priority-${task.priority.toLowerCase()}`;
                    taskEl.style.cursor = 'pointer';
                    
                    // Make the entire task item clickable to view details
                    taskEl.addEventListener('click', function(e) {
                        // Only if not clicking on checkbox or action buttons
                        if (!e.target.closest('.form-check-input') && !e.target.closest('.task-actions')) {
                            // Find the task by ID and show details
                            const taskToShow = tasks.find(t => t.id === task.id);
                            if (taskToShow) {
                                // Create a fake event object for the showTaskDetails function
                                showTaskDetails({
                                    extendedProps: {
                                        taskId: task.id
                                    }
                                });
                            }
                        }
                    });

                    // Checkbox
                    var checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.className = 'form-check-input me-2';
                    checkbox.checked = task.isCompleted;
                    checkbox.onclick = function(e) {
                        e.stopPropagation(); // Prevent task item click
                        updateTaskStatus(task.id, !task.isCompleted);
                    };

                    // Task title
                    var taskTitle = document.createElement('span');
                    taskTitle.className = 'task-title';
                    taskTitle.textContent = task.title;

                    // Task time
                    var taskTime = document.createElement('span');
                    taskTime.className = 'task-time';
                    if (task.time) {
                        let timeStr = formatTime(task.time);
                        let [hours, minutes] = timeStr.split(':');
                        let intHours = parseInt(hours);
                        let ampm = intHours >= 12 ? 'PM' : 'AM';
                        intHours = intHours % 12;
                        intHours = intHours ? intHours : 12; // Convert 0 to 12
                        taskTime.textContent = `${intHours}:${minutes} ${ampm}`;
                    }

                    // Task actions
                    var taskActions = document.createElement('div');
                    taskActions.className = 'task-actions';

                    // Edit button
                    var editBtn = document.createElement('button');
                    editBtn.className = 'btn btn-sm btn-outline-primary';
                    editBtn.innerHTML = '<i class="fas fa-edit"></i>';
                    editBtn.onclick = function(e) {
                        e.stopPropagation(); // Prevent task item click
                        loadTaskForEditing(task.id);
                    };

                    // Delete button
                    var deleteBtn = document.createElement('button');
                    deleteBtn.className = 'btn btn-sm btn-outline-danger';
                    deleteBtn.innerHTML = '<i class="fas fa-trash-alt"></i>';
                    deleteBtn.onclick = function(e) {
                        e.stopPropagation(); // Prevent task item click
                        deleteTask(task.id);
                    };

                    taskActions.appendChild(editBtn);
                    taskActions.appendChild(deleteBtn);

                    taskEl.appendChild(checkbox);
                    taskEl.appendChild(taskTitle);
                    taskEl.appendChild(taskTime);
                    taskEl.appendChild(taskActions);

                    todayTasksEl.appendChild(taskEl);
                });
            }

            function updateTaskStatus(taskId, isCompleted) {
                fetch(`/Calendar/UpdateTaskStatus?id=${taskId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ isCompleted: isCompleted })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Update local task
                        const taskIndex = tasks.findIndex(t => t.id === taskId);
                        if (taskIndex !== -1) {
                            tasks[taskIndex].isCompleted = isCompleted;
                        }

                        // Remove all instances of this task from the calendar
                        cleanupTaskEvents(taskId);
                        
                        // Add updated event with completion status
                        const task = tasks.find(t => t.id === taskId);
                        if (task) {
                            calendar.addEvent({
                                id: task.id.toString(),
                                title: task.title,
                                start: task.time ? `${task.date}T${formatTime(task.time)}:00` : task.date,
                                allDay: !task.time,
                                extendedProps: {
                                    taskId: task.id,
                                    completed: isCompleted,
                                    priority: task.priority,
                                    notes: task.notes
                                },
                                color: getPriorityColor(task.priority),
                                classNames: isCompleted ? ['completed-event'] : []
                            });
                        }

                        // Refresh today's tasks list
                        showTodaysTasks();
                    } else {
                        showAlert('Failed to update task status', 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error updating task status:', error);
                    showAlert('Failed to update task status', 'danger');
                });
            }

            function editTask(task) {
                // Fill the form with task details
                document.getElementById('taskTitle').value = task.title;
                document.getElementById('taskDate').value = new Date(task.date).toISOString().split('T')[0];
                document.getElementById('taskTime').value = task.time ? formatTime(task.time) : '';
                document.getElementById('taskPriority').value = task.priority.toLowerCase();
                document.getElementById('taskNotes').value = task.notes || '';

                // Remove all instances of the task from the calendar
                cleanupTaskEvents(task.id);

                // Store the task ID for updating
                document.getElementById('addTask').dataset.taskId = task.id;
                document.getElementById('addTask').innerHTML = '<i class="fas fa-save me-2"></i>Update Task';
                document.getElementById('addTask').onclick = function() {
                    updateTask(task.id);
                };

                // Focus on title field
                document.getElementById('taskTitle').focus();

                showAlert('Task loaded for editing', 'info');
            }

            function cleanupTaskEvents(taskId) {
                // Get all events
                const events = calendar.getEvents();
                
                // Remove any event with matching ID (both as string and number) or taskId in extendedProps
                events.forEach(event => {
                    if (event.id === taskId.toString() || 
                        event.id === taskId || 
                        (event.extendedProps && event.extendedProps.taskId === taskId)) {
                        event.remove();
                    }
                });
            }

            function getPriorityColor(priority) {
                switch(priority) {
                    case 'High': return '#f72585';
                    case 'Medium': return '#ff9f1c';
                    case 'Low': return '#2ec4b6';
                    default: return '#4361ee';
                }
            }

            function showAlert(message, type) {
                // Remove existing alerts
                var existingAlert = document.querySelector('.alert');
                if (existingAlert) {
                    existingAlert.remove();
                }

                var alertHtml = `
                    <div class="alert alert-${type} alert-dismissible fade show position-fixed top-0 end-0 m-3" role="alert" style="z-index: 1100;">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;

                document.body.insertAdjacentHTML('beforeend', alertHtml);

                // Auto dismiss after 3 seconds
                setTimeout(() => {
                    var alert = document.querySelector('.alert');
                    if (alert) {
                        bootstrap.Alert.getInstance(alert).close();
                    }
                }, 3000);
            }

            function resetTaskForm() {
                document.getElementById('taskId').value = '';
                document.getElementById('taskTitle').value = '';
                document.getElementById('taskDate').value = new Date().toISOString().split('T')[0];
                document.getElementById('taskTime').value = '';
                document.getElementById('taskPriority').value = 'medium';
                document.getElementById('taskNotes').value = '';
                document.getElementById('taskCompletionStatus').checked = false;
            }

            function showTaskDetails(event) {
                var taskId = event.extendedProps.taskId;
                console.log('Showing details for taskId:', taskId); // Debug log
                var task = tasks.find(t => t.id === taskId);
                if (!task) {
                    console.error('Task not found in tasks array:', taskId);
                    return;
                }

                var priorityText = '';
                var priorityClass = '';
                switch(task.priority) {
                    case 'High':
                        priorityText = 'High Priority';
                        priorityClass = 'text-danger';
                        break;
                    case 'Medium':
                        priorityText = 'Medium Priority';
                        priorityClass = 'text-warning';
                        break;
                    case 'Low':
                        priorityText = 'Low Priority';
                        priorityClass = 'text-success';
                        break;
                }

                var timeText = '';
                if (task.time) {
                    let timeStr = formatTime(task.time);
                    let [hours, minutes] = timeStr.split(':');
                    let intHours = parseInt(hours);
                    let ampm = intHours >= 12 ? 'PM' : 'AM';
                    intHours = intHours % 12;
                    intHours = intHours ? intHours : 12; // Convert 0 to 12
                    timeText = `${intHours}:${minutes} ${ampm}`;
                }

                // Set the content of the task details modal
                var detailsContent = `
                    <h4>${task.title}</h4>
                    <div class="d-flex flex-wrap justify-content-between mt-3">
                        <div class="mb-3">
                            <p class="mb-1"><strong>Date:</strong></p>
                            <p>${new Date(task.date).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</p>
                        </div>
                        ${timeText ? `
                        <div class="mb-3">
                            <p class="mb-1"><strong>Time:</strong></p>
                            <p>${timeText}</p>
                        </div>
                        ` : ''}
                        <div class="mb-3">
                            <p class="mb-1"><strong>Priority:</strong></p>
                            <p class="${priorityClass}">${priorityText}</p>
                        </div>
                    </div>
                    ${task.notes ? `
                    <div class="mt-3">
                        <p class="mb-1"><strong>Notes:</strong></p>
                        <p>${task.notes}</p>
                    </div>
                    ` : ''}
                    <div class="form-check mt-3">
                        <input class="form-check-input" type="checkbox" id="completeTaskDetailCheck" ${task.isCompleted ? 'checked' : ''}>
                        <label class="form-check-label" for="completeTaskDetailCheck">
                            Mark as completed
                        </label>
                    </div>
                `;
                
                document.getElementById('taskDetailsContent').innerHTML = detailsContent;
                
                // Set task ID for the edit and delete buttons
                document.getElementById('editTaskBtn').setAttribute('data-task-id', task.id);
                document.getElementById('deleteTaskBtn').setAttribute('data-task-id', task.id);
                console.log('Set data-task-id on buttons:', task.id); // Debug log
                
                // Show the modal
                taskDetailsModal.show();
                
                // Handle checkbox change
                document.getElementById('completeTaskDetailCheck').onchange = function() {
                    var isCompleted = this.checked;
                    updateTaskStatus(task.id, isCompleted);
                    taskDetailsModal.hide();
                };
            }
        });
    </script>
}