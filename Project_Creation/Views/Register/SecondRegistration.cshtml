@model Project_Creation.DTO.PasswordDto
@{
    ViewData["Title"] = "Complete Your Registration";
}

<style>
    .password-requirements ul li {
        margin-bottom: 5px;
    }

    .password-requirements i {
        margin-right: 5px;
    }

    .progress {
        background-color: #e9ecef;
        border-radius: 4px;
    }

    .progress-bar {
        transition: width 0.3s ease, background-color 0.3s ease;
    }
</style>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3>Complete Your Registration</h3>
                </div>
                <div class="card-body">
                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
                    }

                    <form asp-action="SecondRegistration" enctype="multipart/form-data" method="post">
                        <input type="hidden" asp-for="UserId" />

                        <!-- Password -->
                        <div class="form-group mb-3">
                            <label asp-for="Password" class="form-label">Password *</label>
                            <input asp-for="Password" type="password" class="form-control" id="passwordInput" required />
                            <span asp-validation-for="Password" class="text-danger"></span>
                            <div class="password-requirements mt-2">
                                <small class="form-text text-muted">
                                    Password must contain at least:
                                    <ul class="list-unstyled">
                                        <li id="lengthRequirement" data-text="8 characters"><i class="bi bi-x-circle-fill text-danger"></i> 8 characters</li>
                                        <li id="upperRequirement" data-text="1 uppercase letter"><i class="bi bi-x-circle-fill text-danger"></i> 1 uppercase letter</li>
                                        <li id="lowerRequirement" data-text="1 lowercase letter"><i class="bi bi-x-circle-fill text-danger"></i> 1 lowercase letter</li>
                                        <li id="numberRequirement" data-text="1 number"><i class="bi bi-x-circle-fill text-danger"></i> 1 number</li>
                                        <li id="specialRequirement" data-text="1 special character"><i class="bi bi-x-circle-fill text-danger"></i> 1 special character</li>
                                    </ul>
                                </small>
                                <div class="progress mt-2" style="height: 5px;">
                                    <div id="passwordStrength" class="progress-bar bg-danger" role="progressbar" style="width: 0%"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Confirm Password -->
                        <div class="form-group mb-3">
                            <label class="form-label">Confirm Password *</label>
                            <input type="password" name="ConfirmPassword" class="form-control" id="confirmPasswordInput" required />
                            <span id="confirmPasswordError" class="text-danger d-none">Passwords do not match</span>
                            <span id="confirmPasswordSuccess" class="text-success d-none"><i class="bi bi-check-circle-fill"></i> Passwords match</span>
                        </div>

                        <div class="form-group">
                            <button type="submit" class="btn btn-primary" disabled>Complete Registration</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        const passwordInput = document.getElementById('passwordInput');
        const confirmPasswordInput = document.getElementById('confirmPasswordInput');
        const confirmPasswordError = document.getElementById('confirmPasswordError');
        const confirmPasswordSuccess = document.getElementById('confirmPasswordSuccess');
        const submitButton = document.querySelector('button[type="submit"]');

        function updateRequirement(elementId, isValid) {
            const element = document.getElementById(elementId);
            const text = element.getAttribute('data-text');
            element.innerHTML = isValid
                ? `<i class="bi bi-check-circle-fill text-success"></i> ${text}`
                : `<i class="bi bi-x-circle-fill text-danger"></i> ${text}`;
        }

        function validatePassword() {
            const password = passwordInput.value;

            const hasLength = password.length >= 8;
            const hasUpper = /[A-Z]/.test(password);
            const hasLower = /[a-z]/.test(password);
            const hasNumber = /[0-9]/.test(password);
            const hasSpecial = /[!@@#$%^&*(),.?":{}|<>\[\]\\\/\-_=+]/.test(password);

            updateRequirement('lengthRequirement', hasLength);
            updateRequirement('upperRequirement', hasUpper);
            updateRequirement('lowerRequirement', hasLower);
            updateRequirement('numberRequirement', hasNumber);
            updateRequirement('specialRequirement', hasSpecial);

            updatePasswordStrengthBar(password.length, hasUpper, hasLower, hasNumber, hasSpecial);

            validatePasswordConfirmation();
            toggleSubmitButton();
        }

        function validatePasswordConfirmation() {
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (confirmPassword === '') {
                confirmPasswordError.classList.add('d-none');
                confirmPasswordSuccess.classList.add('d-none');
            } else if (password === confirmPassword) {
                confirmPasswordError.classList.add('d-none');
                confirmPasswordSuccess.classList.remove('d-none');
            } else {
                confirmPasswordError.classList.remove('d-none');
                confirmPasswordSuccess.classList.add('d-none');
            }

            toggleSubmitButton();
        }

        function allPasswordRequirementsMet() {
            const password = passwordInput.value;
            return (
                password.length >= 8 &&
                /[A-Z]/.test(password) &&
                /[a-z]/.test(password) &&
                /[0-9]/.test(password) &&
                /[!@@#$%^&*(),.?":{}|<>\[\]\\\/\-_=+]/.test(password)
            );
        }

        function toggleSubmitButton() {
            submitButton.disabled = !(
                allPasswordRequirementsMet() &&
                passwordInput.value === confirmPasswordInput.value
            );
        }

        function updatePasswordStrengthBar(length, hasUpper, hasLower, hasNumber, hasSpecial) {
            const strengthBar = document.getElementById('passwordStrength');
            let strength = 0;
            if (length >= 8) strength += 20;
            if (hasUpper) strength += 20;
            if (hasLower) strength += 20;
            if (hasNumber) strength += 20;
            if (hasSpecial) strength += 20;

            strengthBar.style.width = `${strength}%`;

            if (strength <= 40) {
                strengthBar.className = 'progress-bar bg-danger';
            } else if (strength <= 80) {
                strengthBar.className = 'progress-bar bg-warning';
            } else {
                strengthBar.className = 'progress-bar bg-success';
            }
        }

        // Add event listeners for both input and change events
        ['input', 'change'].forEach(eventType => {
            passwordInput.addEventListener(eventType, validatePassword);
            confirmPasswordInput.addEventListener(eventType, validatePasswordConfirmation);
        });

        // Clear any existing values and run initial validation on page load
        document.addEventListener("DOMContentLoaded", () => {
            // Clear any existing values
            passwordInput.value = '';
            confirmPasswordInput.value = '';
            
            // Reset the UI
            submitButton.disabled = true;
            confirmPasswordError.classList.add('d-none');
            confirmPasswordSuccess.classList.add('d-none');
            
            // Reset all requirements to initial state
            ['lengthRequirement', 'upperRequirement', 'lowerRequirement', 'numberRequirement', 'specialRequirement'].forEach(id => {
                const element = document.getElementById(id);
                const text = element.getAttribute('data-text');
                element.innerHTML = `<i class="bi bi-x-circle-fill text-danger"></i> ${text}`;
            });
            
            // Reset password strength bar
            const strengthBar = document.getElementById('passwordStrength');
            strengthBar.style.width = '0%';
            strengthBar.className = 'progress-bar bg-danger';
        });
    </script>
}
