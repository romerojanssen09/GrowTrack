@using System.Security.Claims
@using Project_Creation.Models.Entities

@{
    ViewData["Title"] = "Business Dashboard";
    var userRole = User.FindFirstValue(ClaimTypes.Role);
    var accessLevelClaim = User.FindFirstValue("AccessLevel");
    var staffAccessLevel = !string.IsNullOrEmpty(accessLevelClaim) && Enum.TryParse<StaffAccessLevel>(accessLevelClaim, out var level) ? level : StaffAccessLevel.None;
}

<div class="container-fluid">
    <!-- Decorative Background Pattern -->
    <div class="dashboard-bg-pattern"></div>
    
    <!-- Header Row with Enhanced Welcome Banner -->
    <div class="welcome-banner mb-4">
        <div class="d-flex justify-content-between align-items-center flex-sm-row flex-column gap-4">
            <div class="welcome-content">
                <h1 class="h3 mb-1 fw-bold">Business Dashboard</h1>
                <p class="mb-0 welcome-message">Welcome back, <span class="user-name">@User.Identity.Name!</span></p>
                <div class="welcome-decoration"></div>
            </div>
            @if (userRole == "BusinessOwner" || staffAccessLevel.HasFlag(StaffAccessLevel.Inventory))
            {
                <div class="btn-group action-buttons d-flex flex-sm-row flex-column gap-2">
                    <a asp-controller="Inventory1" asp-action="Create" class="btn btn-primary rounded">
                        <i class="fas fa-plus-circle me-2"></i>Add Product
                    </a>
                    @if (userRole == "BusinessOwner" || staffAccessLevel.HasFlag(StaffAccessLevel.QuickSales))
                    {
                        <a asp-controller="Inventory1" asp-action="QuickSale" class="btn btn-success rounded">
                            <i class="fas fa-cash-register me-2"></i>
                            Quick Sale
                        </a>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Key Metrics Row -->
    <div class="row mb-3">
        <!-- Business Summary Card -->
        <div class="col-lg-12">
            <div class="card shadow-sm border-0">
                <div class="card-body py-3">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="fw-bold text-primary mb-0">
                            <i class="fas fa-chart-line me-2"></i>Business Performance Summary
                        </h6>
                        <span class="badge bg-primary rounded-pill">Today</span>
                    </div>
                    <div class="row g-3">
                        @if (userRole == "BusinessOwner" || staffAccessLevel.HasFlag(StaffAccessLevel.Inventory))
                        {
                            <div class="col-lg-3 col-md-6">
                                <div class="d-flex align-items-center border-start border-4 border-primary px-3 py-3 rounded shadow-sm metric-card">
                                    <div class="flex-shrink-0 metric-icon">
                                        <i class="fas fa-peso-sign fa-2x text-primary"></i>
                                    </div>
                                    <div class="ms-3">
                                        <div class="text-xs text-muted">INVENTORY VALUE</div>
                                        <div class="h5 mb-0 font-weight-bold" id="inventoryValue">₱0.00</div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-lg-3 col-md-6">
                                <div class="d-flex align-items-center border-start border-4 border-warning px-3 py-3 rounded shadow-sm metric-card">
                                    <div class="flex-shrink-0 metric-icon">
                                        <i class="fas fa-exclamation-triangle fa-2x text-warning"></i>
                                    </div>
                                    <div class="ms-3">
                                        <div class="text-xs text-muted">LOW STOCK ITEMS</div>
                                        <div class="h5 mb-0 font-weight-bold" id="lowStockCount">0</div>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (userRole == "BusinessOwner" || staffAccessLevel.HasFlag(StaffAccessLevel.QuickSales))
                        {
                            <div class="col-lg-3 col-md-6">
                                <div class="d-flex align-items-center border-start border-4 border-success px-3 py-3 rounded shadow-sm metric-card">
                                    <div class="flex-shrink-0 metric-icon">
                                        <i class="fas fa-receipt fa-2x text-success"></i>
                                    </div>
                                    <div class="ms-3">
                                        <div class="text-xs text-muted">TODAY'S SALES</div>
                                        <div class="h5 mb-0 font-weight-bold" id="todaysSales">₱0.00</div>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (userRole == "BusinessOwner" || staffAccessLevel.HasFlag(StaffAccessLevel.Leads))
                        {
                            <div class="col-lg-3 col-md-6">
                                <div class="d-flex align-items-center border-start border-4 border-info px-3 py-3 rounded shadow-sm metric-card">
                                    <div class="flex-shrink-0 metric-icon">
                                        <i class="bi bi-people-fill fa-2x text-info"></i>
                                    </div>
                                    <div class="ms-3">
                                        <div class="text-xs text-muted">LEADS IN PIPELINE</div>
                                        <div class="h5 mb-0 font-weight-bold" id="keyMetricTotalLeads">0</div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions & Main Content Row -->
    <div class="row">
        <!-- Quick Actions Column -->
        <div class="col-lg-3 mb-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex align-items-center">
                    <i class="fas fa-bolt text-primary me-2"></i>
                    <h6 class="m-0 fw-bold text-primary">Quick Actions</h6>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush">
                        @if (userRole == "BusinessOwner" || staffAccessLevel.HasFlag(StaffAccessLevel.QuickSales))
                        {
                            <a href="/Inventory1/QuickSale" class="list-group-item list-group-item-action py-3 px-3 quick-action-item">
                                <div class="d-flex align-items-center">
                                    <div class="flex-shrink-0 me-3 quick-action-icon">
                                        <i class="fas fa-cash-register text-success"></i>
                                    </div>
                                    <div>
                                        <div class="fw-bold">Process Sale</div>
                                        <small class="text-muted">Record a new transaction</small>
                                    </div>
                                </div>
                            </a>
                        }
                        @if (userRole == "BusinessOwner" || staffAccessLevel.HasFlag(StaffAccessLevel.Inventory))
                        {
                            <a href="/Inventory1/Create" class="list-group-item list-group-item-action py-3 px-3 quick-action-item">
                                <div class="d-flex align-items-center">
                                    <div class="flex-shrink-0 me-3 quick-action-icon">
                                        <i class="fas fa-plus-circle text-primary"></i>
                                    </div>
                                    <div>
                                        <div class="fw-bold">Add Product</div>
                                        <small class="text-muted">Create a new inventory item</small>
                                    </div>
                                </div>
                            </a>
                            <a href="/Inventory1/StockIn" class="list-group-item list-group-item-action py-3 px-3 quick-action-item">
                                <div class="d-flex align-items-center">
                                    <div class="flex-shrink-0 me-3 quick-action-icon">
                                        <i class="fas fa-arrow-down text-info"></i>
                                    </div>
                                    <div>
                                        <div class="fw-bold">Stock In</div>
                                        <small class="text-muted">Record incoming inventory</small>
                                    </div>
                                </div>
                            </a>
                        }
                        @if (userRole == "BusinessOwner" || staffAccessLevel.HasFlag(StaffAccessLevel.Leads))
                        {
                            <a asp-controller="Leads" asp-action="Index" class="list-group-item list-group-item-action py-3 px-3 quick-action-item">
                                <div class="d-flex align-items-center">
                                    <div class="flex-shrink-0 me-3 quick-action-icon">
                                        <i class="bi bi-people-fill text-secondary"></i>
                                    </div>
                                    <div>
                                        <div class="fw-bold">Manage Leads</div>
                                        <small class="text-muted">View and update your leads</small>
                                    </div>
                                </div>
                            </a>
                        }
                        @if (userRole == "BusinessOwner")
                        {
                            <a asp-controller="Campaigns" asp-action="Index" class="list-group-item list-group-item-action py-3 px-3 quick-action-item">
                                <div class="d-flex align-items-center">
                                    <div class="flex-shrink-0 me-3 quick-action-icon">
                                        <i class="fas fa-bullhorn text-danger"></i>
                                    </div>
                                    <div>
                                        <div class="fw-bold">Marketing</div>
                                        <small class="text-muted">Create and manage campaigns</small>
                                    </div>
                                </div>
                            </a>
                        }
                        <a asp-controller="Calendar" asp-action="Index" class="list-group-item list-group-item-action py-3 px-3 quick-action-item">
                            <div class="d-flex align-items-center">
                                <div class="flex-shrink-0 me-3 quick-action-icon">
                                    <i class="bi bi-calendar-event text-info"></i>
                                </div>
                                <div>
                                    <div class="fw-bold">Calendar</div>
                                    <small class="text-muted">Manage your schedule</small>
                                </div>
                            </div>
                        </a>
                        <a asp-controller="Staffs" asp-action="Index" class="list-group-item list-group-item-action py-3 px-3 quick-action-item">
                            <div class="d-flex align-items-center">
                                <div class="flex-shrink-0 me-3 quick-action-icon">
                                    <i class="fas fa-users-cog text-warning"></i>
                                </div>
                                <div>
                                    <div class="fw-bold">Staffs</div>
                                    <small class="text-muted">Manage your staffs</small>
                                </div>
                            </div>
                        </a>
                    </div>
                </div>
            </div>

            <!-- Row 2: Sales Trend and Calendar continues -->
            @if (userRole == "BusinessOwner" || staffAccessLevel.HasFlag(StaffAccessLevel.QuickSales))
            {
                <!-- Sales Trend -->
                <div class="col-lg-12 mt-4">
                    <div class="card shadow h-100">
                        <div class="card-header py-3 d-flex justify-content-between align-items-center">
                            <h6 class="m-0 font-weight-bold text-primary" id="trend">7-Day Sales Trend</h6>
                            <div>
                                <select id="trendDaysSelect" class="form-select form-select-sm" style="width: auto;" onchange="handleTrendDaysChange(this.value)">
                                    <option value="7">7-Day</option>
                                    <option value="30">30-Day</option>
                                    <option value="365">365-Day</option>
                                    <option value="custom">Custom</option>
                                </select>
                            </div>
                        </div>
                        <div class="card-body">
                            <div id="customDaysInput" class="input-group input-group-sm mb-3" style="width: 150px; display: none;">
                                <input type="text" id="customDays" class="form-control" placeholder="Days"
                                       oninput="this.value = this.value.replace(/[^0-9]/g, '')"
                                       onkeypress="if(event.key === 'Enter') { applyCustomDays(); }">
                                <button class="btn btn-outline-primary" type="button" onclick="applyCustomDays()">Go</button>
                            </div>
                            <div class="chart-area">
                                <canvas id="salesTrendChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Main Dashboard Content -->
        <div class="col-lg-9">
            <div class="row">
                <!-- Row 1: Leads Overview and Calendar side by side -->
                @if (userRole == "BusinessOwner" || staffAccessLevel.HasFlag(StaffAccessLevel.Leads))
                {
                    <div class="col-lg-6 mb-4">
                        <div class="card shadow h-65">
                            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                                <h6 class="m-0 font-weight-bold text-primary">Leads Overview</h6>
                                <div>
                                    <a href="/Leads" class="btn btn-sm btn-outline-primary">View All</a>
                                </div>
                            </div>
                            <div class="card-body">
                                <div id="leadsOverview">
                                    <div class="d-flex justify-content-between mb-3">
                                        <div class="text-center">
                                            <h3 class="h4 mb-0" id="totalLeads">0</h3>
                                            <p class="text-muted mb-0">Total Leads</p>
                                        </div>
                                        <div class="text-center">
                                            <h3 class="h4 mb-0" id="newLeads">0</h3>
                                            <p class="text-muted mb-0">New</p>
                                        </div>
                                        <div class="text-center">
                                            <h3 class="h4 mb-0" id="contactedLeads">0</h3>
                                            <p class="text-muted mb-0">Contacted</p>
                                        </div>
                                    </div>

                                    <div class="progress mb-2" style="height: 10px;">
                                        <div class="progress-bar" style="background-color:var(--dark-color) !important;" id="progressNew" style="width: 0%" role="progressbar"></div>
                                        <div class="progress-bar bg-success" id="progressContacted" style="width: 0%" role="progressbar"></div>
                                    </div>

                                    <div class="d-flex justify-content-between small">
                                        <span><i class="fas fa-circle text-primary"></i> New</span>
                                        <span><i class="fas fa-circle text-success"></i> Contacted</span>
                                    </div>

                                    <div class="alert alert-info mt-3 mb-0 d-flex align-items-center">
                                        <i class="fas fa-info-circle me-2"></i>
                                        <div>
                                            <span id="recentLeads">0</span> new leads in the last 7 days
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (userRole == "BusinessOwner" || staffAccessLevel.HasFlag(StaffAccessLevel.Inventory))
                        {
                            <!-- Low Stock Alerts -->
                            <div class="card shadow mt-4">
                                <div class="card-header py-3 d-flex justify-content-between align-items-center bg-warning text-white">
                                    <h6 class="m-0 font-weight-bold">Low Stock Alerts</h6>
                                    <span class="badge bg-danger" id="lowStockBadge">0</span>
                                </div>
                                <div class="card-body p-0">
                                    <div class="list-group list-group-flush" id="lowStockList">
                                        <!-- Will be populated by JavaScript -->
                                        <div class="text-center py-3">Loading alerts...</div>
                                    </div>
                                    <div class="p-3">
                                        <a href="/Inventory1?filter=lowstock" class="btn btn-sm btn-primary w-100">
                                            View All Low Stock
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }

                <!-- Calendar Section -->
                <div class="col-lg-6 mb-4">
                    <div class="card shadow h-100">
                        <div class="card-header py-3 d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-calendar-event text-primary me-2"></i>
                                <h6 class="m-0 fw-bold text-primary">Calendar</h6>
                            </div>
                            <div>
                                <a href="/Calendar" class="btn btn-sm btn-outline-primary">View Full Calendar</a>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="upcoming-events">
                                <h5 class="mb-3 text-primary" id="tasksDateHeader">Today's Appointments</h5>
                                <div id="upcomingEvents" class="list-group calendar-events">
                                    <div class="text-center py-3">
                                        <i class="fas fa-spinner fa-spin me-2"></i> Loading Appointments...
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Product Requests Section -->
                <div class="col-lg-12 mb-4">
                    <div class="card shadow h-100">
                        <div class="card-header py-3 d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-shopping-basket text-primary me-2"></i>
                                <h6 class="m-0 fw-bold text-primary">Product Requests</h6>
                            </div>
                            <div>
                                <a href="/Chat" class="btn btn-sm btn-outline-primary">View All Messages</a>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="product-requests">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Customer</th>
                                                <th class="text-center">Quantity / Product</th>
                                                <th>Message</th>
                                                <th class="text-center">Status</th>
                                                <th>Date</th>
                                                <th class="text-end">Action</th>
                                            </tr>
                                        </thead>
                                        <tbody id="productRequests">
                                            <tr>
                                                <td colspan="7" class="text-center py-3">
                                                    <div class="spinner-border text-primary" role="status">
                                                        <span class="visually-hidden">Loading...</span>
                                                    </div>
                                                    <p class="mt-2 text-muted">Loading Product Requests...</p>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Row 3: Full-width Inventory Overview -->
                @if (userRole == "BusinessOwner" || staffAccessLevel.HasFlag(StaffAccessLevel.Inventory))
                {
                    <!-- Inventory Overview - Full Width -->
                    <div class="col-lg-12 mb-4">
                        <div class="card shadow">
                            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-boxes text-primary me-2"></i>
                                    <h6 class="m-0 fw-bold text-primary">Inventory Overview</h6>
                                </div>
                                <div>
                                    <a href="/Inventory1" class="btn btn-sm btn-outline-primary">View All</a>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-sm table-hover" id="inventoryOverview">
                                        <thead>
                                            <tr>
                                                <th>Product</th>
                                                <th>Category</th>
                                                <th>Stock</th>
                                                <th>Value</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Will be populated by JavaScript -->
                                            <tr>
                                                <td colspan="5" class="text-center py-3">
                                                    <div class="spinner-border text-primary" role="status">
                                                        <span class="visually-hidden">Loading...</span>
                                                    </div>
                                                    <p class="mt-2 text-muted">Loading inventory...</p>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Row 4: Recent Activity - Full Width -->
        <div class="col-lg-12">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-history text-primary me-2"></i>
                        <h6 class="m-0 fw-bold text-primary">Recent Activity</h6>
                    </div>
                    <div class="dropdown no-arrow">
                        <a class="dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            <i class="fas fa-filter fa-sm fa-fw text-gray-400"></i>
                        </a>
                        <div class="dropdown-menu dropdown-menu-end shadow">
                            <a class="dropdown-item" href="#" id="showSales">Sales Only</a>
                            <a class="dropdown-item" href="#" id="showStock">Stock Movements</a>
                            <a class="dropdown-item" href="#" id="showLeads">Leads Only</a>
                            <a class="dropdown-item" href="#" id="showAll">Show All</a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="activity-feed" id="recentActivity">
                        <!-- Will be populated by JavaScript -->
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2 text-muted">Loading recent activity...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* message to supplier *@
<div class="modal fade" id="messageModal" tabindex="-1" aria-labelledby="messageModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="messageModalLabel">Message Supplier</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="sendMessageForm" asp-controller="Dashboard" asp-action="SendMessageToSupplier" method="post">
                <div class="modal-body">
                    <p><strong>Name:</strong> <span id="supplierName"></span></p>
                    <p><strong>Email:</strong> <span id="supplierEmail"></span></p>

                    <div class="mb-3">
                        <label for="subject" class="form-label">Subject</label>
                        <input type="text" class="form-control" id="subject" name="subject" required>
                    </div>

                    <div class="mb-3">
                        <label for="message" class="form-label">Message</label>
                        <textarea class="form-control" id="message" name="message" rows="4" required></textarea>
                    </div>

                    <input type="hidden" name="supplierId" id="supplierId">
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Send Message</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Dashboard Background Pattern */
        .dashboard-bg-pattern {
            position: fixed;
            top: 0;
            right: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 10% 20%, rgba(243, 153, 62, 0.08) 0%, transparent 50%),
                radial-gradient(circle at 90% 80%, rgba(48, 66, 81, 0.08) 0%, transparent 40%);
            opacity: 0.5;
            z-index: 0;
            pointer-events: none;
        }
        
        /* Enhanced Welcome Banner */
        .welcome-banner {
            position: relative;
            background: linear-gradient(135deg, rgba(255,255,255,0.9) 0%, rgba(255,255,255,0.8) 100%);
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 5px 20px rgba(0,0,0,0.05);
            border-left: 5px solid var(--accent-color);
            margin-bottom: 2rem;
            margin-top: 20; /* Added margin-top */
            z-index: 1;
            overflow: hidden;
        }
        
        .welcome-banner::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 150px;
            height: 100%;
            background: linear-gradient(135deg, transparent 0%, rgba(243, 153, 62, 0.08) 100%);
            z-index: -1;
        }
        
        .welcome-content {
            position: relative;
        }
        
        .welcome-message {
            color: var(--text-muted);
            font-size: 1.05rem;
        }
        
        .user-name {
            font-weight: 600;
            color: var(--accent-color);
            position: relative;
        }
        
        .welcome-decoration {
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 80px;
            height: 3px;
            background: linear-gradient(90deg, var(--accent-color) 0%, transparent 100%);
            border-radius: 3px;
            margin-top: 100px;
        }
        
        .action-buttons .btn {
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        
        .action-buttons .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0,0,0,0.15);
        }
        
        /* Welcome Section Styling - Removing as replaced by welcome-banner */
        .welcome-section {
            position: relative;
            padding-bottom: 0.5rem;
            margin-top: 20px;
            z-index: 1;
        }
        
        .welcome-section::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 60px;
            height: 3px;
            background: linear-gradient(90deg, var(--accent-color) 0%, var(--dark-color) 100%);
            border-radius: 3px;
        }
        
        /* Enhanced Metric Cards */
        .metric-card {
            transition: all 0.3s ease;
            border-radius: 10px;
            overflow: hidden;
            z-index: 1;
        }
        
        .metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.08) !important;
        }
        
        .metric-icon {
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.8);
            box-shadow: 0 4px 10px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
        }
        
        .metric-card:hover .metric-icon {
            transform: scale(1.1) rotate(5deg);
        }
        
        /* Quick Action Items */
        .quick-action-item {
            border: none;
            border-bottom: 1px solid rgba(0,0,0,0.03);
            transition: all 0.3s ease;
            margin-bottom: 2px;
        }
        
        .quick-action-item:last-child {
            border-bottom: none;
        }
        
        .quick-action-item:hover {
            background-color: rgba(255,255,255,0.8);
            transform: translateX(5px);
        }
        
        .quick-action-icon {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
            background: rgba(255,255,255,0.9);
            box-shadow: 0 3px 8px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
        }
        
        .quick-action-item:hover .quick-action-icon {
            transform: scale(1.1);
        }
        
        /* Card Enhancements */
        .card {
            border-radius: 12px;
            overflow: hidden;
            transition: all 0.3s ease;
            border: none;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05) !important;
            position: relative;
            z-index: 1;
            background: rgba(255,255,255,0.9);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        
        .card:hover {
            box-shadow: 0 10px 25px rgba(0,0,0,0.08) !important;
        }
        
        .card-header {
            border-bottom: 1px solid rgba(0,0,0,0.05);
            background: rgba(255,255,255,0.8) !important;
        }
        
        /* Table Enhancements */
        .table {
            margin-bottom: 0;
        }
        
        .table th {
            font-weight: 600;
            color: var(--dark-color);
            border-top: none;
            background: rgba(248,249,250,0.5);
        }
        
        .table td {
            vertical-align: middle;
        }
        
        .table-hover tbody tr {
            transition: all 0.2s ease;
        }
        
        .table-hover tbody tr:hover {
            background-color: rgba(243, 153, 62, 0.04) !important;
            transform: scale(1.01);
            box-shadow: 0 3px 10px rgba(0,0,0,0.02);
        }
        
        .table-responsive {
            border-radius: 10px;
            overflow: hidden;
        }
        
        /* Badge Enhancements */
        .badge {
            padding: 0.4em 0.8em;
            font-weight: 500;
            border-radius: 6px;
        }
        
        /* Button Enhancements */
        .btn {
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.08);
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .btn-sm {
            border-radius: 6px;
        }
        
        /* Activity Feed Styling */
        .activity-item {
            border-bottom: 1px solid rgba(0,0,0,0.05);
            padding: 12px 15px;
            transition: all 0.2s ease;
        }
        
        .activity-item:last-child {
            border-bottom: none;
        }
        
        .activity-item:hover {
            background-color: rgba(0,0,0,0.02);
        }
        
        .activity-item i.fas {
            font-size: 1.1rem;
            width: 20px;
            text-align: center;
        }
        
        .activity-item p {
            font-size: 0.9rem;
            margin-bottom: 0.25rem;
            color: #333;
        }
        
        .activity-item small.text-muted {
            font-size: 0.75rem;
            color: #777 !important;
        }
        
        .activity-feed {
            max-height: 500px;
            overflow-y: auto;
            scrollbar-width: thin;
        }
        
        .activity-feed::-webkit-scrollbar {
            width: 5px;
        }
        
        .activity-feed::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 5px;
        }
        
        .activity-feed::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 5px;
        }
        
        .activity-feed::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
        
        .activity-item .text-success,
        .activity-item .text-primary,
        .activity-item .text-warning,
        .activity-item .text-info,
        .activity-item .text-secondary {
            width: 30px;
            height: 30px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background: rgba(0,0,0,0.05);
        }
        
        .activity-item .text-success { color: #28a745 !important; }
        .activity-item .text-primary { color: #0d6efd !important; }
        .activity-item .text-warning { color: #ffc107 !important; }
        .activity-item .text-info { color: #0dcaf0 !important; }
        .activity-item .text-secondary { color: #6c757d !important; }
    </style>
}

@section Scripts {
    <!-- FullCalendar JS -->
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet" />

    <!-- Product Requests JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        // Helper to truncate text with ellipsis
        function truncateText(text, maxLength = 50) {
            if (!text) return '-';
            return text.length > maxLength ? text.slice(0, maxLength) + '...' : text;
        }

        // Render full details HTML for a customer (all requests with full message and date)
        function renderFullDetails(group, groupIndex) {
            return `
            <tr class="full-details d-none" id="details-${groupIndex}">
                <td colspan="6">
                    <div class="p-3 bg-light border rounded">
                        <strong>Full Requests Details:</strong><br/>
                        ${group.requests.map(r => {
                            const date = new Date(r.createdAt);
                            const dateStr = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
                            const timeStr = date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' });
                            const message = r.message ? r.message : '-';
                            return `
                                <div style="margin-bottom:10px;">
                                    <strong>${r.quantity} x ${r.productName}</strong> <br/>
                                    Message: ${message} <br/>
                                    Requested on: ${dateStr} at ${timeStr}
                                </div>
                            `;
                        }).join('')}
                    </div>
                </td>
            </tr>
            `;
        }

        // Render a grouped request row (1 row per customer)
        function renderGroupedRequestRow(group, groupIndex) {
            const { customerId, customerName, requests } = group;
            const maxVisible = 3;

            // Show up to maxVisible product summaries
            const visibleRequests = requests.slice(0, maxVisible).map(r => `${r.quantity} x ${r.productName}`).join('<br/>');

            // Count if there are more
            const extraCount = requests.length - maxVisible;

            // Take the first message and truncate it
            const message = truncateText(requests[0]?.message, 50);

            // Latest request date from this customer
            const latestDate = new Date(
                Math.max(...requests.map(r => new Date(r.createdAt).getTime()))
            );
            const formattedDate = latestDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
            const formattedTime = latestDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' });

            return `
            <tr class="request-row">
                <td><span class="fw-semibold">${customerName}</span></td>
                <td>${visibleRequests}${extraCount > 0 ? `, <p class="fw-bold">+${extraCount} more</p>` : ''}</td>
                <td>${message}</td>
                <td class="text-center"><span class="badge bg-warning">Pending</span></td>
                <td class="text-nowrap">${formattedDate} at ${formattedTime}</td>
                <td class="text-end">
                    <a href="/Chat/Index?userId=${customerId || ''}" class="btn btn-sm btn-primary">
                        <i class="bi bi-chat-dots me-1"></i> Reply
                    </a>
                    <button class="btn btn-link p-0" style="font-size:0.9em;" onclick="toggleDetails(${groupIndex})">Details</button>
                </td>
            </tr>
            ${renderFullDetails(group, groupIndex)}
            `;
        }

        // Toggle details row visibility
        function toggleDetails(index) {
            const detailsRow = document.getElementById(`details-${index}`);
            if (detailsRow.classList.contains('d-none')) {
                detailsRow.classList.remove('d-none');
            } else {
                detailsRow.classList.add('d-none');
            }
        }

        // Load and render all grouped requests as single rows per customer
        function loadProductRequests() {
            const requestsContainer = document.getElementById('productRequests');
            if (!requestsContainer) return;

            fetch('/Dashboard/GetProductRequests')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.groupedRequests && data.groupedRequests.length > 0) {
                        let html = '';
                        data.groupedRequests.forEach((group, index) => {
                            console.log('index: ',index);
                            html += renderGroupedRequestRow(group, index);
                        });
                        requestsContainer.innerHTML = html;
                    } else {
                        requestsContainer.innerHTML = `
                            <tr><td colspan="7" class="text-center py-3 text-muted">
                                <i class="fas fa-inbox fa-2x mb-2"></i>
                                <div>No product requests found</div>
                            </td></tr>`;
                    }
                })
                .catch(error => {
                    console.error('Error loading product requests:', error);
                    requestsContainer.innerHTML = `
                        <tr><td colspan="7" class="text-center py-3 text-danger">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            Failed to load product requests
                        </td></tr>`;
                });
        }

        // SignalR real-time updates for product requests
        document.addEventListener('DOMContentLoaded', function () {
            loadProductRequests();

            // Setup SignalR connection
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/realtimehub")
                .build();

            connection.start().then(function () {
                console.log('Dashboard SignalR Connected');
            }).catch(function (err) {
                console.error(err.toString());
            });

            connection.on("ReceiveProductRequest", function (messageId, productId, productName, quantity, customerName, message, createdAt) {
                // Reload all product requests
                loadProductRequests();

                // Show persistent toast notification
                const toastId = `toast-${Date.now()}`;
                const toast = `
                <div id="${toastId}" class="toast align-items-center text-white bg-primary border-0 show" role="alert" aria-live="assertive" aria-atomic="true" style="position: fixed; top: 1rem; right: 1rem; z-index: 1055; min-width: 250px;">
                    <div class="d-flex">
                        <div class="toast-body">
                            <strong>New Product Request</strong>: ${quantity} x ${productName} from ${customerName}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close" onclick="document.getElementById('${toastId}').remove()"></button>
                    </div>
                </div>`;
                const container = document.querySelector('.toast-container') || createToastContainer();
                container.insertAdjacentHTML('beforeend', toast);
            });

            function createToastContainer() {
                const container = document.createElement('div');
                container.className = 'toast-container';
                container.style.position = 'fixed';
                container.style.top = '1rem';
                container.style.right = '1rem';
                container.style.zIndex = '1055';
                document.body.appendChild(container);
                return container;
            }
        });
    </script>

    <script>
        // Handle trend days dropdown change
        function handleTrendDaysChange(value) {
            if (value === 'custom') {
                document.getElementById('customDaysInput').style.display = 'flex';
                document.getElementById('customDays').focus();
            } else {
                document.getElementById('customDaysInput').style.display = 'none';
                loadSalesTrendByDays(parseInt(value));
            }
        }

        // Apply custom days from input
        function applyCustomDays() {
            const customDays = document.getElementById('customDays').value;
            if (customDays && parseInt(customDays) > 0) {
                loadSalesTrendByDays(parseInt(customDays));
            } else {
                alert('Please enter a valid number of days greater than 0');
            }
        }

        // Load sales trend data by days
        function loadSalesTrendByDays(days) {
            if (isNaN(days) || days <= 0) {
                console.error('Invalid days value:', days);
                return;
            }

            const trendElement = document.getElementById('trend');
            if (trendElement) {
                trendElement.textContent = `${days}-Day Sales Trend`;
            }

            fetch(`/Dashboard/GetSalesTrend?type=days&days=${days}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const chartElement = document.getElementById('salesTrendChart');
                        if (chartElement) {
                            createSalesTrendChart(data, 'Daily Sales');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error loading sales trend by days:', error);
                });
        }

        // Create the sales trend chart with the provided data
        function createSalesTrendChart(data, labelText) {
            const ctx = document.getElementById('salesTrendChart');
            if (!ctx) return;

            // Safely destroy existing chart if it exists
            if (window.salesTrendChart && typeof window.salesTrendChart.destroy === 'function') {
                window.salesTrendChart.destroy();
            }

            window.salesTrendChart = new Chart(ctx.getContext('2d'), {
                type: 'line',
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: labelText,
                        data: data.values,
                        backgroundColor: 'rgba(54, 162, 235, 0.1)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 2,
                        pointBackgroundColor: 'rgba(54, 162, 235, 1)',
                        pointBorderColor: '#fff',
                        pointHoverRadius: 5,
                        pointHoverBackgroundColor: 'rgba(54, 162, 235, 1)',
                        pointHoverBorderColor: '#fff',
                        pointHitRadius: 10,
                        pointBorderWidth: 2,
                        tension: 0.3,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return '₱' + context.raw.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                                }
                            }
                        },
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '₱' + value.toLocaleString();
                                }
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.05)'
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    }
                }
            });
        }

        function messageSupplier(id) {
            fetch(`/Dashboard/GetSupplierData?id=${id}`)  // Changed from /id= to ?id=
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        document.getElementById('supplierName').textContent = data.data.supplierName;
                        document.getElementById('supplierEmail').textContent = data.data.email;
                        document.getElementById('hiddenSupplierId').value = id;

                        // Show the modal
                        const messageModal = new bootstrap.Modal(document.getElementById('messageModal'));
                        messageModal.show();
                    } else {
                        alert(data.message || 'Failed to load supplier data');
                    }
                })
                .catch(error => {
                    console.error('Error fetching supplier data:', error);
                    alert('Error loading supplier information');
                });
        }

        // Display upcoming events
        function displayUpcomingEvents(tasks) {
            const eventsContainer = document.getElementById('upcomingEvents');
            if (!eventsContainer) return;

            // Sort tasks by date and priority
            tasks.sort((a, b) => {
                // First by date
                const dateA = new Date(a.date);
                const dateB = new Date(b.date);
                if (dateA < dateB) return -1;
                if (dateA > dateB) return 1;

                // Then by priority (High > Medium > Low)
                // Convert enum to numeric value for comparison if needed
                const getPriorityValue = (p) => {
                    if (typeof p === 'number') return p; // Already numeric
                    if (p === 'High') return 2;
                    if (p === 'Low') return 0;
                    return 1; // Medium or default
                };

                return getPriorityValue(b.priority) - getPriorityValue(a.priority);
            });

            // Filter out past tasks and limit to next 5 upcoming tasks
            const today = new Date();
            today.setHours(0, 0, 0, 0);

            const upcomingTasks = tasks
                .filter(task => {
                    const taskDate = new Date(task.date);
                    // Only include tasks that are today or in the future
                    return taskDate >= today;
                })
                .slice(0, 5);

            if (upcomingTasks.length === 0) {
                eventsContainer.innerHTML = '<div class="text-center py-3 text-muted">No upcoming Appointments</div>';
                return;
            }

            let html = '';
            upcomingTasks.forEach(task => {
                const taskDate = new Date(task.date);
                const isToday = taskDate.toDateString() === today.toDateString();
                const isTomorrow = new Date(today);
                isTomorrow.setDate(today.getDate() + 1);
                const isTomorrowDate = taskDate.toDateString() === isTomorrow.toDateString();

                let dateDisplay = '';
                if (isToday) {
                    dateDisplay = '<span class="badge bg-primary">Today</span>';
                } else if (isTomorrowDate) {
                    dateDisplay = '<span class="badge bg-info">Tomorrow</span>';
                } else {
                    dateDisplay = taskDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
                }

                // Convert priority enum to string
                const priorityString = getPriorityString(task.priority);
                console.log(`Task ${task.id} (${task.title}) has priority: ${task.priority} (${priorityString})`);

                let priorityClass = '';
                let priorityBadge = '';
                switch(priorityString) {
                    case 'High':
                        priorityClass = 'border-left-danger';
                        priorityBadge = '<span class="badge bg-danger me-1">High</span>';
                        break;
                    case 'Medium':
                        priorityClass = 'border-left-warning';
                        priorityBadge = '<span class="badge bg-warning text-dark me-1">Medium</span>';
                        break;
                    case 'Low':
                        priorityClass = 'border-left-success';
                        priorityBadge = '<span class="badge bg-success me-1">Low</span>';
                        break;
                    default:
                        priorityClass = 'border-left-warning';
                        priorityBadge = '<span class="badge bg-warning text-dark me-1">Medium</span>';
                }

                const timeStr = task.time ? formatTime(task.time) : '';
                let timeDisplay = '';

                if (timeStr) {
                    // Convert to 12-hour format
                    const [hours, minutes] = timeStr.split(':').map(Number);
                    const period = hours >= 12 ? 'PM' : 'AM';
                    const hours12 = hours % 12 || 12; // Convert 0 to 12
                    timeDisplay = `<span class="text-muted">${hours12}:${minutes.toString().padStart(2, '0')} ${period}</span>`;
                }

                // Check if task time is in the past
                let isPastTime = false;
                if (isToday && timeStr) {
                    const [hours, minutes] = timeStr.split(':').map(Number);
                    const taskTime = new Date();
                    taskTime.setHours(hours, minutes, 0, 0);
                    isPastTime = taskTime < new Date();
                }

                // Skip tasks from today that have already passed
                if (isToday && isPastTime) {
                    return;
                }

                html += `
                <a href="/Calendar" class="list-group-item list-group-item-action ${priorityClass} py-2 px-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="text-truncate">
                            ${priorityBadge}<span class="${task.isCompleted ? 'text-decoration-line-through text-muted' : ''}">${task.title}</span>
                        </div>
                        <div class="d-flex align-items-center">
                            ${timeDisplay}
                            <span class="ms-2">${dateDisplay}</span>
                        </div>
                    </div>
                </a>`;
            });

            eventsContainer.innerHTML = html || '<div class="text-center py-3 text-muted">No upcoming appointments</div>';
        }

        // Update the tasks date header
        function updateTasksDateHeader() {
            const dateHeader = document.getElementById('tasksDateHeader');
            if (!dateHeader) return;

            const today = new Date();
            const formattedDate = today.toLocaleDateString('en-US', {
                month: 'long',
                day: 'numeric',
                year: 'numeric'
            });

            dateHeader.textContent = `Today's Appointments: ${formattedDate}`;
        }

        // Load calendar events
        function loadCalendarEvents() {
            fetch('/Calendar/GetTasks')
                .then(response => response.json())
                .then(data => {
                    if (data && data.length > 0) {
                        // Update the date header
                        updateTasksDateHeader();

                        // Log some data to debug priority values
                        console.log('First few tasks with priorities:', data.slice(0, 3).map(t => ({
                            id: t.id,
                            title: t.title,
                            priority: t.priority,
                            priorityType: typeof t.priority
                        })));

                        // Display upcoming events
                        displayUpcomingEvents(data);
                    } else {
                        // Display empty message
                        document.getElementById('upcomingEvents').innerHTML =
                            '<div class="text-center py-3 text-muted">No upcoming appointments</div>';
                    }
                })
                .catch(error => {
                    console.error('Error loading calendar events:', error);
                    document.getElementById('upcomingEvents').innerHTML =
                        '<div class="text-center py-3 text-danger">Error loading appointments</div>';
                });
        }

        // Format time function
        function formatTime(timeObj) {
            if (typeof timeObj === 'string') {
                return timeObj.substring(0, 5); // Extract HH:mm part
            }
            return `${timeObj.hours.toString().padStart(2, '0')}:${timeObj.minutes.toString().padStart(2, '0')}`;
        }

        // Get priority color
        function getPriorityColor(priority) {
            // Handle priority as either string or number (enum)
            if (typeof priority === 'number') {
                switch(priority) {
                    case 2: return '#f72585'; // High
                    case 1: return '#ff9f1c'; // Medium
                    case 0: return '#2ec4b6'; // Low
                    default: return '#4361ee';
                }
            } else {
                switch(priority) {
                    case 'High': return '#f72585';
                    case 'Medium': return '#ff9f1c';
                    case 'Low': return '#2ec4b6';
                    default: return '#4361ee';
                }
            }
        }

        // Convert priority enum to string
        function getPriorityString(priorityValue) {
            // Handle both string and number formats
            if (typeof priorityValue === 'number') {
                switch(priorityValue) {
                    case 2: return 'High';
                    case 1: return 'Medium';
                    case 0: return 'Low';
                    default: return 'Medium';
                }
            }
            return priorityValue || 'Medium';
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize dashboard
            loadDashboardData();
            loadCalendarEvents();

            // Set interval to refresh data every 5 minutes
            setInterval(loadDashboardData, 300000);
            setInterval(loadCalendarEvents, 300000);

            // Format currency in PHP
            function formatCurrency(amount) {
                return '₱' + parseFloat(amount).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
            }

            // Format numbers with commas
            function formatNumber(num) {
                return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            }

            // Load all dashboard data
            function loadDashboardData() {
                loadSummaryMetrics();
                loadInventoryOverview();
                loadLowStockAlerts();
                loadLeadsSummary();

                // Only load sales trend if the element exists (staff with QuickSales access)
                if (document.getElementById('salesTrendChart')) {
                    loadSalesTrendByDays(7);
                }

                loadRecentActivity();
            }

            // Load summary metrics
            function loadSummaryMetrics() {
                fetch('/Dashboard/GetBusinessMetrics')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const elements = {
                                inventoryValue: document.getElementById('inventoryValue'),
                                lowStockCount: document.getElementById('lowStockCount'),
                                todaysSales: document.getElementById('todaysSales'),
                                totalProducts: document.getElementById('totalProducts')
                            };

                            if (elements.inventoryValue) {
                                elements.inventoryValue.textContent = formatCurrency(data.inventoryValue);
                            }
                            if (elements.lowStockCount) {
                                elements.lowStockCount.textContent = formatNumber(data.lowStockCount);
                            }
                            if (elements.todaysSales) {
                                elements.todaysSales.textContent = formatCurrency(data.todaysSales);
                            }
                            if (elements.totalProducts) {
                                elements.totalProducts.textContent = formatNumber(data.totalProducts);
                            }
                        } else {
                            console.error('Error loading metrics:', data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error loading metrics:', error);
                    });
            }

            // Load inventory overview
            function loadInventoryOverview() {
                const tableBody = document.querySelector('#inventoryOverview tbody');
                if (!tableBody) return;

                fetch('/Dashboard/GetInventoryOverview?limit=10')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.products.length > 0) {
                            let html = '';
                            data.products.forEach(product => {
                                let statusBadge = '';
                                if (product.quantity <= 0) {
                                    statusBadge = '<span class="badge bg-danger">Out of Stock</span>';
                                } else if (product.quantity <= product.reorderLevel) {
                                    statusBadge = '<span class="badge bg-warning">Low Stock</span>';
                                } else {
                                    statusBadge = '<span class="badge bg-success">In Stock</span>';
                                }

                                html += `
                                <tr>
                                    <td>${product.name}</td>
                                    <td>${product.category}</td>
                                    <td>${formatNumber(product.quantity)}</td>
                                    <td>${formatCurrency(product.value)}</td>
                                    <td>${statusBadge}</td>
                                </tr>`;
                            });
                            tableBody.innerHTML = html;
                        } else {
                            tableBody.innerHTML = '<tr><td colspan="5" class="text-center">No inventory data available</td></tr>';
                        }
                    })
                    .catch(error => {
                        console.error('Error loading inventory overview:', error);
                        tableBody.innerHTML = '<tr><td colspan="5" class="text-center">Error loading inventory data</td></tr>';
                    });
            }

            // Load low stock alerts
            function loadLowStockAlerts() {
                const alertList = document.getElementById('lowStockList');
                const alertBadge = document.getElementById('lowStockBadge');
                if (!alertList) return;

                fetch('/Dashboard/GetLowStockAlerts?limit=5')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.alerts.length > 0) {
                            let html = '';
                            data.alerts.forEach(alert => {
                                const percent = Math.round((alert.currentStock / alert.reorderLevel) * 100);
                                const btnOrStockIn = alert.supplierId != null
                                    ? `
                                    <button onclick="messageSupplier(${alert.supplierId})" class="btn btn-sm btn-outline-secondary" title="Message Supplier">
                                        <i class="bi bi-chat-left-dots-fill icon-hover"></i>
                                    </button>
                                    <a href="/Inventory1/StockIn?id=${alert.id}" class="btn btn-sm btn-outline-secondary" title="Stock In">
                                        <i class="fas fa-arrow-down icon-hover"></i>
                                    </a>`
                                    : `<a href="/Inventory1/StockIn?id=${alert.id}" class="btn btn-sm btn-outline-secondary text-center stock-in-link" title="Stock In">
                                            <i class="fas fa-arrow-down icon-hover"></i>
                                        </a>`;

                                html += `
                                <div class="list-group-item">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <strong>${alert.productName}</strong>
                                        <div class="d-flex gap-2 align-items-center">
                                            <span class="badge bg-${alert.currentStock <= 0 ? 'danger' : 'warning'}">
                                                ${alert.currentStock <= 0 ? 'OUT' : alert.currentStock}
                                            </span>
                                            ${btnOrStockIn}
                                        </div>
                                    </div>
                                    <div class="progress mt-2" style="height: 5px;">
                                        <div class="progress-bar bg-${percent < 50 ? 'danger' : 'warning'}"
                                             role="progressbar"
                                             style="width: ${Math.min(percent, 100)}%">
                                        </div>
                                    </div>
                                    <small class="text-muted">Reorder at ${alert.reorderLevel}</small>
                                </div>`;
                            });

                            alertList.innerHTML = html;
                            if (alertBadge) {
                                alertBadge.textContent = data.totalAlerts;
                            }
                        } else {
                            alertList.innerHTML = '<div class="text-center py-3">No low stock alerts</div>';
                            if (alertBadge) {
                                alertBadge.textContent = '0';
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error loading low stock alerts:', error);
                        alertList.innerHTML = '<div class="text-center py-3">Error loading alerts</div>';
                    });
            }

            // Load recent activity
            function loadRecentActivity() {
                const activityFeed = document.getElementById('recentActivity');
                if (!activityFeed) return;

                fetch('/Dashboard/GetRecentActivity?limit=10')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            if (data.activities && data.activities.length > 0) {
                                let html = '';
                                data.activities.forEach(activity => {
                                    let icon = '';
                                    let color = '';

                                    switch(activity.type) {
                                        case 'Sale':
                                            icon = 'fa-cash-register';
                                            color = 'text-success';
                                            break;
                                        case 'Stock In':
                                            icon = 'fa-arrow-down';
                                            color = 'text-primary';
                                            break;
                                        case 'StockOut':
                                            icon = 'fa-arrow-up';
                                            color = 'text-warning';
                                            break;
                                        case 'New Product':
                                            icon = 'fa-plus-circle';
                                            color = 'text-info';
                                            break;
                                        case 'Lead':
                                            icon = 'fa-user-plus';
                                            color = 'text-info';
                                            break;
                                        default:
                                            icon = 'fa-info-circle';
                                            color = 'text-secondary';
                                    }

                                    html += `
                                    <div class="activity-item ${activity.type.toLowerCase()}">
                                        <div class="d-flex align-items-start">
                                            <div class="flex-shrink-0 me-3">
                                                <span class="${color}">
                                                    <i class="fas ${icon}"></i>
                                                </span>
                                            </div>
                                            <div class="flex-grow-1">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <p class="mb-1 fw-medium">${activity.description}</p>
                                                    <small class="text-muted ms-2">${activity.time}</small>
                                                </div>
                                                ${activity.details ? `<small class="text-muted d-block">${activity.details}</small>` : ''}
                                            </div>
                                        </div>
                                    </div>`;
                                });
                                activityFeed.innerHTML = html;
                            } else {
                                activityFeed.innerHTML = '<div class="text-center py-4">No recent activity found</div>';
                            }
                        } else {
                            activityFeed.innerHTML = `<div class="text-center py-4 text-danger">${data.message || 'Error loading activity'}</div>`;
                        }
                    })
                    .catch(error => {
                        console.error('Error loading recent activity:', error);
                        activityFeed.innerHTML = '<div class="text-center py-4 text-danger">Failed to load recent activity</div>';
                    });
            }

            // Filter activity feed
            const filterButtons = {
                showSales: document.getElementById('showSales'),
                showStock: document.getElementById('showStock'),
                showLeads: document.getElementById('showLeads'),
                showAll: document.getElementById('showAll')
            };

            if (filterButtons.showSales) {
                filterButtons.showSales.addEventListener('click', function(e) {
                    e.preventDefault();
                    document.querySelectorAll('.activity-item').forEach(item => {
                        item.style.display = item.classList.contains('sale') ? '' : 'none';
                    });
                });
            }

            if (filterButtons.showStock) {
                filterButtons.showStock.addEventListener('click', function(e) {
                    e.preventDefault();
                    document.querySelectorAll('.activity-item').forEach(item => {
                        item.style.display = (item.classList.contains('stockin') || item.classList.contains('stockout')) ? '' : 'none';
                    });
                });
            }

            if (filterButtons.showLeads) {
                filterButtons.showLeads.addEventListener('click', function(e) {
                    e.preventDefault();
                    document.querySelectorAll('.activity-item').forEach(item => {
                        item.style.display = item.classList.contains('lead') ? '' : 'none';
                    });
                });
            }

            if (filterButtons.showAll) {
                filterButtons.showAll.addEventListener('click', function(e) {
                    e.preventDefault();
                    document.querySelectorAll('.activity-item').forEach(item => {
                        item.style.display = '';
                    });
                });
            }

            // Load leads summary
            function loadLeadsSummary() {
                const elements = {
                    totalLeads: document.getElementById('totalLeads'),
                    newLeads: document.getElementById('newLeads'),
                    contactedLeads: document.getElementById('contactedLeads'),
                    recentLeads: document.getElementById('recentLeads'),
                    progressNew: document.getElementById('progressNew'),
                    progressContacted: document.getElementById('progressContacted'),
                    keyMetricTotalLeads: document.getElementById('keyMetricTotalLeads'),
                    keyMetricNewLeads: document.getElementById('keyMetricNewLeads')
                };

                // Skip if the main leads overview element doesn't exist (if user doesn't have access to leads)
                if (!elements.totalLeads) return;

                fetch('/Dashboard/GetLeadsSummary')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // console.log("dataLeads: ", data)
                            // Update Leads Overview card
                            elements.totalLeads.textContent = formatNumber(data.totalLeads);
                            elements.newLeads.textContent = formatNumber(data.newLeads);
                            elements.contactedLeads.textContent = formatNumber(data.contactedLeads);
                            elements.recentLeads.textContent = formatNumber(data.recentLeads);

                            // Update Key Metrics area
                            if (elements.keyMetricTotalLeads) {
                                elements.keyMetricTotalLeads.textContent = formatNumber(data.totalLeads);
                            }

                            if (elements.keyMetricNewLeads) {
                                elements.keyMetricNewLeads.textContent = formatNumber(data.newLeads);
                            }

                            // Calculate progress percentages for the progress bar
                            if (data.totalLeads > 0) {
                                const newPercent = (data.newLeads / data.totalLeads) * 100;
                                const contactedPercent = (data.contactedLeads / data.totalLeads) * 100;

                                elements.progressNew.style.width = newPercent + '%';
                                elements.progressContacted.style.width = contactedPercent + '%';
                            } else {
                                elements.progressNew.style.width = '0%';
                                elements.progressContacted.style.width = '0%';
                            }
                        } else {
                            console.error('Error loading leads summary:', data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error loading leads summary:', error);
                    });
            }
        });
    </script>
}
